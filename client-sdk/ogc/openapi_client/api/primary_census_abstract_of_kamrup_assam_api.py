# coding: utf-8

"""
    OGC Compliant DX Resource Server

    OGC compliant Features and Common API definitions. Includes Schema and Response Objects.   <a href='/stac/api'>STAC API Documentation</a>    <a href='/metering/api'>DX Metering API Documentation</a>

    The version of the OpenAPI document: 1.0.1
    Contact: info@iudx.org.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.collection import Collection
from openapi_client.models.feature_collection_geo_json import FeatureCollectionGeoJSON
from openapi_client.models.feature_geo_json import FeatureGeoJSON

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PrimaryCensusAbstractOfKamrupAssamApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_features(
        self,
        bbox_crs: Optional[StrictStr] = None,
        crs: Optional[StrictStr] = None,
        bbox: Annotated[Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=4, max_length=6)]], Field(description="Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)  If the value consists of four numbers, the coordinate reference system is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  If the value consists of six numbers, the coordinate reference system is WGS 84 longitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  The query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate Reference Systems by Reference.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.")] = None,
        datetime: Annotated[Optional[StrictStr], Field(description="Either a date-time or an interval. Date and time expressions adhere to RFC 3339. Intervals may be bounded or half-bounded (double-dots at start or end).  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only features that have a temporal property that intersects the value of `datetime` are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.")] = None,
        limit: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=2000000, strict=True, ge=1)]], Field(description="OGC Resource server also offers way to paginate the result for queries.  If a query returns large number of records then user can use additional parameters in query parameters to limit numbers of records  to be returned.  Minimum = 0. Maximum = 1000. Default = 10.")] = None,
        tot_m: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_f: Optional[Union[StrictFloat, StrictInt]] = None,
        fpfl_os: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_ner1: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_ner2: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_bb: Optional[Union[StrictFloat, StrictInt]] = None,
        non_work_p: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_32: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_31: Optional[Union[StrictFloat, StrictInt]] = None,
        wwoc_nd: Optional[Union[StrictFloat, StrictInt]] = None,
        non_work_m: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_aom: Optional[Union[StrictFloat, StrictInt]] = None,
        non_work_f: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_mft: Optional[Union[StrictFloat, StrictInt]] = None,
        f_ill: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_vt: Optional[StrictStr] = None,
        tfufc_elc: Optional[Union[StrictFloat, StrictInt]] = None,
        main_cl_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_conc: Optional[Union[StrictFloat, StrictInt]] = None,
        sl_nsrbh: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_uc: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_gimas: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_hk: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_dt: Optional[StrictStr] = None,
        mow_wood: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_tt: Optional[Union[StrictFloat, StrictInt]] = None,
        os_ren: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_bb: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_el: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_kr: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_pl_pol: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__3: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__4: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__1: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__2: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__7: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_cem: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__8: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__5: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__6: Optional[Union[StrictFloat, StrictInt]] = None,
        ans_pl: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__9: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_5_: Optional[Union[StrictFloat, StrictInt]] = None,
        mainwork_m: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_4: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_5: Optional[Union[StrictFloat, StrictInt]] = None,
        fpfl_pss: Optional[Union[StrictFloat, StrictInt]] = None,
        mainwork_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_mub: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_sp: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_tot: Optional[Union[StrictFloat, StrictInt]] = None,
        mainwork_f: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_mmt: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_1: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_2: Optional[Union[StrictFloat, StrictInt]] = None,
        os_non: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_3: Optional[Union[StrictFloat, StrictInt]] = None,
        main_cl_m: Optional[Union[StrictFloat, StrictInt]] = None,
        no_hh: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_sdt: Optional[StrictStr] = None,
        main_cl_f: Optional[Union[StrictFloat, StrictInt]] = None,
        wwoc_od: Optional[Union[StrictFloat, StrictInt]] = None,
        sl_nssba: Optional[Union[StrictFloat, StrictInt]] = None,
        p_06: Optional[Union[StrictFloat, StrictInt]] = None,
        nhhnhl: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_coh: Optional[Union[StrictFloat, StrictInt]] = None,
        ldws_a: Optional[Union[StrictFloat, StrictInt]] = None,
        tnhh_abs: Optional[Union[StrictFloat, StrictInt]] = None,
        fpfl_st: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_hp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tm_bot: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_gi_mas: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_aom: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tpl: Optional[Union[StrictFloat, StrictInt]] = None,
        p_st: Optional[Union[StrictFloat, StrictInt]] = None,
        p_lit: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_hmt: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_4_r: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tel: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_31: Optional[Union[StrictFloat, StrictInt]] = None,
        os_ow: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_bb: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_f: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_hk1: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_aom: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_32: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_p: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_31: Optional[Union[StrictFloat, StrictInt]] = None,
        p_sc: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_32: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_3_r: Optional[Union[StrictFloat, StrictInt]] = None,
        f_06: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_tr: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_f: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_ner: Optional[Union[StrictFloat, StrictInt]] = None,
        f_sc: Optional[Union[StrictFloat, StrictInt]] = None,
        nhh_hbfw_1: Optional[Union[StrictFloat, StrictInt]] = None,
        nhh_hbfw_2: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_p: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_01: Optional[Union[StrictFloat, StrictInt]] = None,
        ldws_np: Optional[Union[StrictFloat, StrictInt]] = None,
        f_st: Optional[Union[StrictFloat, StrictInt]] = None,
        main_al_p: Optional[Union[StrictFloat, StrictInt]] = None,
        wwoc_cd: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_02: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_4: Optional[Union[StrictFloat, StrictInt]] = None,
        os_ao: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_3: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_2: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_1: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_0: Optional[Union[StrictFloat, StrictInt]] = None,
        st_name: Optional[StrictStr] = None,
        nhh_hlf: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_5: Optional[Union[StrictFloat, StrictInt]] = None,
        f_lit: Optional[Union[StrictFloat, StrictInt]] = None,
        sdt_name: Optional[StrictStr] = None,
        msl_kr: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_pl_pol: Optional[Union[StrictFloat, StrictInt]] = None,
        m_ill: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_lpg_: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_cc: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_snpwm: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_: Optional[Union[StrictFloat, StrictInt]] = None,
        dt_name: Optional[StrictStr] = None,
        kf_dnhk1: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_02: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_01: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_work_p: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_work_m: Optional[Union[StrictFloat, StrictInt]] = None,
        m_06: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_m: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_work_f: Optional[Union[StrictFloat, StrictInt]] = None,
        main_al_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_p: Optional[Union[StrictFloat, StrictInt]] = None,
        main_al_f: Optional[Union[StrictFloat, StrictInt]] = None,
        pl_wsop: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_f: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tm_mo: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_nl: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_ool: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_dnhk: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_cr: Optional[Union[StrictFloat, StrictInt]] = None,
        main_hh_p: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_9_: Optional[Union[StrictFloat, StrictInt]] = None,
        main_hh_m: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tm_lo: Optional[Union[StrictFloat, StrictInt]] = None,
        main_hh_f: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_p: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_or: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_nc: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_ucw: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_noasic: Optional[Union[StrictFloat, StrictInt]] = None,
        vt_name: Optional[StrictStr] = None,
        mow_spwm: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_cl_win: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_sp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_s: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_ao: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_cw: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_cjv: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_f: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tb: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_p: Optional[Union[StrictFloat, StrictInt]] = None,
        p_ill: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_bi: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_bio: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond_ch: Optional[Union[StrictFloat, StrictInt]] = None,
        nsdiod: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_clc: Optional[Union[StrictFloat, StrictInt]] = None,
        nhh_hbfwtp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_31: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_32: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_cl_wii: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tfts: Optional[Union[StrictFloat, StrictInt]] = None,
        m_sc: Optional[Union[StrictFloat, StrictInt]] = None,
        ans_op: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_02: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_01: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_gtb: Optional[Union[StrictFloat, StrictInt]] = None,
        m_st: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_cih: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_ao: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_conc: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_rc: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_02: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_hhw_tc: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_01: Optional[Union[StrictFloat, StrictInt]] = None,
        main_ot_f: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_se: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_mud: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_6_8: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_smm: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_wb: Optional[Union[StrictFloat, StrictInt]] = None,
        main_ot_m: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_gr_th_: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        main_ot_p: Optional[Union[StrictFloat, StrictInt]] = None,
        total: Optional[StrictStr] = None,
        msdw_os: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_nc: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_ss: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_f: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond_11: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_1: Optional[Union[StrictFloat, StrictInt]] = None,
        m_lit: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_ns: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_2: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_m: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_3: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tfuts: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond_10: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_4: Optional[Union[StrictFloat, StrictInt]] = None,
        ldws_wp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_stone: Optional[Union[StrictFloat, StrictInt]] = None,
        pl_wsvi: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_st: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FeatureCollectionGeoJSON:
        """Get features from Primary Census Abstract (2011) for Kamrup Metropolitan district in Assam at village level


        :param bbox_crs:
        :type bbox_crs: str
        :param crs:
        :type crs: str
        :param bbox: Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)  If the value consists of four numbers, the coordinate reference system is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  If the value consists of six numbers, the coordinate reference system is WGS 84 longitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  The query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate Reference Systems by Reference.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
        :type bbox: List[float]
        :param datetime: Either a date-time or an interval. Date and time expressions adhere to RFC 3339. Intervals may be bounded or half-bounded (double-dots at start or end).  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only features that have a temporal property that intersects the value of `datetime` are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.
        :type datetime: str
        :param limit:
        :type limit: int
        :param offset: OGC Resource server also offers way to paginate the result for queries.  If a query returns large number of records then user can use additional parameters in query parameters to limit numbers of records  to be returned.  Minimum = 0. Maximum = 1000. Default = 10.
        :type offset: int
        :param tot_m:
        :type tot_m: float
        :param tot_f:
        :type tot_f: float
        :param fpfl_os:
        :type fpfl_os: float
        :param ndr_ner1:
        :type ndr_ner1: float
        :param ndr_ner2:
        :type ndr_ner2: float
        :param mor_bb:
        :type mor_bb: float
        :param non_work_p:
        :type non_work_p: float
        :param marg_ot_32:
        :type marg_ot_32: float
        :param marg_ot_31:
        :type marg_ot_31: float
        :param wwoc_nd:
        :type wwoc_nd: float
        :param non_work_m:
        :type non_work_m: float
        :param tot_p:
        :type tot_p: float
        :param mof_aom:
        :type mof_aom: float
        :param non_work_f:
        :type non_work_f: float
        :param mof_mft:
        :type mof_mft: float
        :param f_ill:
        :type f_ill: float
        :param mdds_vt:
        :type mdds_vt: str
        :param tfufc_elc:
        :type tfufc_elc: float
        :param main_cl_p:
        :type main_cl_p: float
        :param mor_conc:
        :type mor_conc: float
        :param sl_nsrbh:
        :type sl_nsrbh: float
        :param hh_tscs_uc:
        :type hh_tscs_uc: float
        :param mow_gimas:
        :type mow_gimas: float
        :param kf_hk:
        :type kf_hk: float
        :param mdds_dt:
        :type mdds_dt: str
        :param mow_wood:
        :type mow_wood: float
        :param hh_tscs_tt:
        :type hh_tscs_tt: float
        :param os_ren:
        :type os_ren: float
        :param mow_bb:
        :type mow_bb: float
        :param msl_el:
        :type msl_el: float
        :param tfufc_kr:
        :type tfufc_kr: float
        :param mor_pl_pol:
        :type mor_pl_pol: float
        :param marg_ot_3_:
        :type marg_ot_3_: float
        :param hh_cond__3:
        :type hh_cond__3: float
        :param hh_cond__4:
        :type hh_cond__4: float
        :param hh_cond__1:
        :type hh_cond__1: float
        :param hh_cond__2:
        :type hh_cond__2: float
        :param hh_cond__7:
        :type hh_cond__7: float
        :param mof_cem:
        :type mof_cem: float
        :param hh_cond__8:
        :type hh_cond__8: float
        :param hh_cond__5:
        :type hh_cond__5: float
        :param hh_cond__6:
        :type hh_cond__6: float
        :param ans_pl:
        :type ans_pl: float
        :param hh_cond__9:
        :type hh_cond__9: float
        :param marg_cl_3_:
        :type marg_cl_3_: float
        :param mc_5_:
        :type mc_5_: float
        :param mainwork_m:
        :type mainwork_m: float
        :param hhs_4:
        :type hhs_4: float
        :param hhs_5:
        :type hhs_5: float
        :param fpfl_pss:
        :type fpfl_pss: float
        :param mainwork_p:
        :type mainwork_p: float
        :param mow_mub:
        :type mow_mub: float
        :param hh_tscs_sp:
        :type hh_tscs_sp: float
        :param kf_tot:
        :type kf_tot: float
        :param mainwork_f:
        :type mainwork_f: float
        :param mor_mmt:
        :type mor_mmt: float
        :param hhs_1:
        :type hhs_1: float
        :param hhs_2:
        :type hhs_2: float
        :param os_non:
        :type os_non: float
        :param hhs_3:
        :type hhs_3: float
        :param main_cl_m:
        :type main_cl_m: float
        :param no_hh:
        :type no_hh: float
        :param mdds_sdt:
        :type mdds_sdt: str
        :param main_cl_f:
        :type main_cl_f: float
        :param wwoc_od:
        :type wwoc_od: float
        :param sl_nssba:
        :type sl_nssba: float
        :param p_06:
        :type p_06: float
        :param nhhnhl:
        :type nhhnhl: float
        :param kf_coh:
        :type kf_coh: float
        :param ldws_a:
        :type ldws_a: float
        :param tnhh_abs:
        :type tnhh_abs: float
        :param fpfl_st:
        :type fpfl_st: float
        :param msdw_hp:
        :type msdw_hp: float
        :param marg_al_0_:
        :type marg_al_0_: float
        :param aos_tm_bot:
        :type aos_tm_bot: float
        :param mor_gi_mas:
        :type mor_gi_mas: float
        :param mow_aom:
        :type mow_aom: float
        :param marg_hh_3_:
        :type marg_hh_3_: float
        :param msdw_tpl:
        :type msdw_tpl: float
        :param p_st:
        :type p_st: float
        :param p_lit:
        :type p_lit: float
        :param mor_hmt:
        :type mor_hmt: float
        :param ndr_4_r:
        :type ndr_4_r: float
        :param aos_tel:
        :type aos_tel: float
        :param marg_hh_31:
        :type marg_hh_31: float
        :param os_ow:
        :type os_ow: float
        :param mof_bb:
        :type mof_bb: float
        :param marg_cl_f:
        :type marg_cl_f: float
        :param kf_hk1:
        :type kf_hk1: float
        :param mor_aom:
        :type mor_aom: float
        :param marg_cl_m:
        :type marg_cl_m: float
        :param marg_hh_32:
        :type marg_hh_32: float
        :param marg_cl_p:
        :type marg_cl_p: float
        :param marg_al_31:
        :type marg_al_31: float
        :param p_sc:
        :type p_sc: float
        :param marg_al_32:
        :type marg_al_32: float
        :param ndr_3_r:
        :type ndr_3_r: float
        :param f_06:
        :type f_06: float
        :param ndr_tr:
        :type ndr_tr: float
        :param margwork_f:
        :type margwork_f: float
        :param ndr_ner:
        :type ndr_ner: float
        :param f_sc:
        :type f_sc: float
        :param nhh_hbfw_1:
        :type nhh_hbfw_1: float
        :param nhh_hbfw_2:
        :type nhh_hbfw_2: float
        :param margwork_p:
        :type margwork_p: float
        :param margwork_m:
        :type margwork_m: float
        :param marg_al_01:
        :type marg_al_01: float
        :param ldws_np:
        :type ldws_np: float
        :param f_st:
        :type f_st: float
        :param main_al_p:
        :type main_al_p: float
        :param wwoc_cd:
        :type wwoc_cd: float
        :param marg_al_02:
        :type marg_al_02: float
        :param margwork_4:
        :type margwork_4: float
        :param os_ao:
        :type os_ao: float
        :param margwork_3:
        :type margwork_3: float
        :param margwork_2:
        :type margwork_2: float
        :param margwork_1:
        :type margwork_1: float
        :param margwork_0:
        :type margwork_0: float
        :param st_name:
        :type st_name: str
        :param nhh_hlf:
        :type nhh_hlf: float
        :param margwork_5:
        :type margwork_5: float
        :param f_lit:
        :type f_lit: float
        :param sdt_name:
        :type sdt_name: str
        :param msl_kr:
        :type msl_kr: float
        :param mow_pl_pol:
        :type mow_pl_pol: float
        :param m_ill:
        :type m_ill: float
        :param tfufc_lpg_:
        :type tfufc_lpg_: float
        :param tfufc_cc:
        :type tfufc_cc: float
        :param mow_snpwm:
        :type mow_snpwm: float
        :param aos_:
        :type aos_: float
        :param dt_name:
        :type dt_name: str
        :param kf_dnhk1:
        :type kf_dnhk1: float
        :param marg_hh_02:
        :type marg_hh_02: float
        :param marg_hh_01:
        :type marg_hh_01: float
        :param tot_work_p:
        :type tot_work_p: float
        :param tot_work_m:
        :type tot_work_m: float
        :param m_06:
        :type m_06: float
        :param marg_ot_m:
        :type marg_ot_m: float
        :param tot_work_f:
        :type tot_work_f: float
        :param main_al_m:
        :type main_al_m: float
        :param marg_ot_p:
        :type marg_ot_p: float
        :param main_al_f:
        :type main_al_f: float
        :param pl_wsop:
        :type pl_wsop: float
        :param marg_ot_f:
        :type marg_ot_f: float
        :param aos_tm_mo:
        :type aos_tm_mo: float
        :param msl_nl:
        :type msl_nl: float
        :param msl_ool:
        :type msl_ool: float
        :param kf_dnhk:
        :type kf_dnhk: float
        :param tfufc_cr:
        :type tfufc_cr: float
        :param main_hh_p:
        :type main_hh_p: float
        :param hhs_9_:
        :type hhs_9_: float
        :param main_hh_m:
        :type main_hh_m: float
        :param aos_tm_lo:
        :type aos_tm_lo: float
        :param main_hh_f:
        :type main_hh_f: float
        :param hh_tscs_p:
        :type hh_tscs_p: float
        :param ndr_or:
        :type ndr_or: float
        :param kf_nc:
        :type kf_nc: float
        :param msdw_ucw:
        :type msdw_ucw: float
        :param aos_noasic:
        :type aos_noasic: float
        :param vt_name:
        :type vt_name: str
        :param mow_spwm:
        :type mow_spwm: float
        :param aos_cl_win:
        :type aos_cl_win: float
        :param tfufc_:
        :type tfufc_: float
        :param msdw_sp:
        :type msdw_sp: float
        :param marg_al_3_:
        :type marg_al_3_: float
        :param hh_tscs_s:
        :type hh_tscs_s: float
        :param tfufc_ao:
        :type tfufc_ao: float
        :param msdw_cw:
        :type msdw_cw: float
        :param aos_cjv:
        :type aos_cjv: float
        :param marg_hh_f:
        :type marg_hh_f: float
        :param msdw_tb:
        :type msdw_tb: float
        :param marg_hh_0_:
        :type marg_hh_0_: float
        :param marg_hh_m:
        :type marg_hh_m: float
        :param marg_hh_p:
        :type marg_hh_p: float
        :param p_ill:
        :type p_ill: float
        :param aos_bi:
        :type aos_bi: float
        :param tfufc_bio:
        :type tfufc_bio: float
        :param hh_cond_ch:
        :type hh_cond_ch: float
        :param nsdiod:
        :type nsdiod: float
        :param tfufc_clc:
        :type tfufc_clc: float
        :param nhh_hbfwtp:
        :type nhh_hbfwtp: float
        :param marg_cl_31:
        :type marg_cl_31: float
        :param marg_cl_32:
        :type marg_cl_32: float
        :param aos_cl_wii:
        :type aos_cl_wii: float
        :param msdw_tfts:
        :type msdw_tfts: float
        :param m_sc:
        :type m_sc: float
        :param ans_op:
        :type ans_op: float
        :param marg_ot_02:
        :type marg_ot_02: float
        :param marg_ot_01:
        :type marg_ot_01: float
        :param marg_cl_0_:
        :type marg_cl_0_: float
        :param mow_gtb:
        :type mow_gtb: float
        :param m_st:
        :type m_st: float
        :param kf_cih:
        :type kf_cih: float
        :param msl_ao:
        :type msl_ao: float
        :param mow_conc:
        :type mow_conc: float
        :param msdw_rc:
        :type msdw_rc: float
        :param marg_cl_02:
        :type marg_cl_02: float
        :param aos_hhw_tc:
        :type aos_hhw_tc: float
        :param marg_cl_01:
        :type marg_cl_01: float
        :param main_ot_f:
        :type main_ot_f: float
        :param msl_se:
        :type msl_se: float
        :param mof_mud:
        :type mof_mud: float
        :param hhs_6_8:
        :type hhs_6_8: float
        :param aos_smm:
        :type aos_smm: float
        :param mof_wb:
        :type mof_wb: float
        :param main_ot_m:
        :type main_ot_m: float
        :param mor_gr_th_:
        :type mor_gr_th_: float
        :param marg_ot_0_:
        :type marg_ot_0_: float
        :param main_ot_p:
        :type main_ot_p: float
        :param total:
        :type total: str
        :param msdw_os:
        :type msdw_os: float
        :param tfufc_nc:
        :type tfufc_nc: float
        :param mor_ss:
        :type mor_ss: float
        :param marg_al_f:
        :type marg_al_f: float
        :param hh_cond_11:
        :type hh_cond_11: float
        :param mc_1:
        :type mc_1: float
        :param m_lit:
        :type m_lit: float
        :param hh_tscs_ns:
        :type hh_tscs_ns: float
        :param mc_2:
        :type mc_2: float
        :param marg_al_m:
        :type marg_al_m: float
        :param mc_3:
        :type mc_3: float
        :param msdw_tfuts:
        :type msdw_tfuts: float
        :param hh_cond_10:
        :type hh_cond_10: float
        :param mc_4:
        :type mc_4: float
        :param ldws_wp:
        :type ldws_wp: float
        :param marg_al_p:
        :type marg_al_p: float
        :param mof_stone:
        :type mof_stone: float
        :param pl_wsvi:
        :type pl_wsvi: float
        :param mdds_st:
        :type mdds_st: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_features_serialize(
            bbox_crs=bbox_crs,
            crs=crs,
            bbox=bbox,
            datetime=datetime,
            limit=limit,
            offset=offset,
            tot_m=tot_m,
            tot_f=tot_f,
            fpfl_os=fpfl_os,
            ndr_ner1=ndr_ner1,
            ndr_ner2=ndr_ner2,
            mor_bb=mor_bb,
            non_work_p=non_work_p,
            marg_ot_32=marg_ot_32,
            marg_ot_31=marg_ot_31,
            wwoc_nd=wwoc_nd,
            non_work_m=non_work_m,
            tot_p=tot_p,
            mof_aom=mof_aom,
            non_work_f=non_work_f,
            mof_mft=mof_mft,
            f_ill=f_ill,
            mdds_vt=mdds_vt,
            tfufc_elc=tfufc_elc,
            main_cl_p=main_cl_p,
            mor_conc=mor_conc,
            sl_nsrbh=sl_nsrbh,
            hh_tscs_uc=hh_tscs_uc,
            mow_gimas=mow_gimas,
            kf_hk=kf_hk,
            mdds_dt=mdds_dt,
            mow_wood=mow_wood,
            hh_tscs_tt=hh_tscs_tt,
            os_ren=os_ren,
            mow_bb=mow_bb,
            msl_el=msl_el,
            tfufc_kr=tfufc_kr,
            mor_pl_pol=mor_pl_pol,
            marg_ot_3_=marg_ot_3_,
            hh_cond__3=hh_cond__3,
            hh_cond__4=hh_cond__4,
            hh_cond__1=hh_cond__1,
            hh_cond__2=hh_cond__2,
            hh_cond__7=hh_cond__7,
            mof_cem=mof_cem,
            hh_cond__8=hh_cond__8,
            hh_cond__5=hh_cond__5,
            hh_cond__6=hh_cond__6,
            ans_pl=ans_pl,
            hh_cond__9=hh_cond__9,
            marg_cl_3_=marg_cl_3_,
            mc_5_=mc_5_,
            mainwork_m=mainwork_m,
            hhs_4=hhs_4,
            hhs_5=hhs_5,
            fpfl_pss=fpfl_pss,
            mainwork_p=mainwork_p,
            mow_mub=mow_mub,
            hh_tscs_sp=hh_tscs_sp,
            kf_tot=kf_tot,
            mainwork_f=mainwork_f,
            mor_mmt=mor_mmt,
            hhs_1=hhs_1,
            hhs_2=hhs_2,
            os_non=os_non,
            hhs_3=hhs_3,
            main_cl_m=main_cl_m,
            no_hh=no_hh,
            mdds_sdt=mdds_sdt,
            main_cl_f=main_cl_f,
            wwoc_od=wwoc_od,
            sl_nssba=sl_nssba,
            p_06=p_06,
            nhhnhl=nhhnhl,
            kf_coh=kf_coh,
            ldws_a=ldws_a,
            tnhh_abs=tnhh_abs,
            fpfl_st=fpfl_st,
            msdw_hp=msdw_hp,
            marg_al_0_=marg_al_0_,
            aos_tm_bot=aos_tm_bot,
            mor_gi_mas=mor_gi_mas,
            mow_aom=mow_aom,
            marg_hh_3_=marg_hh_3_,
            msdw_tpl=msdw_tpl,
            p_st=p_st,
            p_lit=p_lit,
            mor_hmt=mor_hmt,
            ndr_4_r=ndr_4_r,
            aos_tel=aos_tel,
            marg_hh_31=marg_hh_31,
            os_ow=os_ow,
            mof_bb=mof_bb,
            marg_cl_f=marg_cl_f,
            kf_hk1=kf_hk1,
            mor_aom=mor_aom,
            marg_cl_m=marg_cl_m,
            marg_hh_32=marg_hh_32,
            marg_cl_p=marg_cl_p,
            marg_al_31=marg_al_31,
            p_sc=p_sc,
            marg_al_32=marg_al_32,
            ndr_3_r=ndr_3_r,
            f_06=f_06,
            ndr_tr=ndr_tr,
            margwork_f=margwork_f,
            ndr_ner=ndr_ner,
            f_sc=f_sc,
            nhh_hbfw_1=nhh_hbfw_1,
            nhh_hbfw_2=nhh_hbfw_2,
            margwork_p=margwork_p,
            margwork_m=margwork_m,
            marg_al_01=marg_al_01,
            ldws_np=ldws_np,
            f_st=f_st,
            main_al_p=main_al_p,
            wwoc_cd=wwoc_cd,
            marg_al_02=marg_al_02,
            margwork_4=margwork_4,
            os_ao=os_ao,
            margwork_3=margwork_3,
            margwork_2=margwork_2,
            margwork_1=margwork_1,
            margwork_0=margwork_0,
            st_name=st_name,
            nhh_hlf=nhh_hlf,
            margwork_5=margwork_5,
            f_lit=f_lit,
            sdt_name=sdt_name,
            msl_kr=msl_kr,
            mow_pl_pol=mow_pl_pol,
            m_ill=m_ill,
            tfufc_lpg_=tfufc_lpg_,
            tfufc_cc=tfufc_cc,
            mow_snpwm=mow_snpwm,
            aos_=aos_,
            dt_name=dt_name,
            kf_dnhk1=kf_dnhk1,
            marg_hh_02=marg_hh_02,
            marg_hh_01=marg_hh_01,
            tot_work_p=tot_work_p,
            tot_work_m=tot_work_m,
            m_06=m_06,
            marg_ot_m=marg_ot_m,
            tot_work_f=tot_work_f,
            main_al_m=main_al_m,
            marg_ot_p=marg_ot_p,
            main_al_f=main_al_f,
            pl_wsop=pl_wsop,
            marg_ot_f=marg_ot_f,
            aos_tm_mo=aos_tm_mo,
            msl_nl=msl_nl,
            msl_ool=msl_ool,
            kf_dnhk=kf_dnhk,
            tfufc_cr=tfufc_cr,
            main_hh_p=main_hh_p,
            hhs_9_=hhs_9_,
            main_hh_m=main_hh_m,
            aos_tm_lo=aos_tm_lo,
            main_hh_f=main_hh_f,
            hh_tscs_p=hh_tscs_p,
            ndr_or=ndr_or,
            kf_nc=kf_nc,
            msdw_ucw=msdw_ucw,
            aos_noasic=aos_noasic,
            vt_name=vt_name,
            mow_spwm=mow_spwm,
            aos_cl_win=aos_cl_win,
            tfufc_=tfufc_,
            msdw_sp=msdw_sp,
            marg_al_3_=marg_al_3_,
            hh_tscs_s=hh_tscs_s,
            tfufc_ao=tfufc_ao,
            msdw_cw=msdw_cw,
            aos_cjv=aos_cjv,
            marg_hh_f=marg_hh_f,
            msdw_tb=msdw_tb,
            marg_hh_0_=marg_hh_0_,
            marg_hh_m=marg_hh_m,
            marg_hh_p=marg_hh_p,
            p_ill=p_ill,
            aos_bi=aos_bi,
            tfufc_bio=tfufc_bio,
            hh_cond_ch=hh_cond_ch,
            nsdiod=nsdiod,
            tfufc_clc=tfufc_clc,
            nhh_hbfwtp=nhh_hbfwtp,
            marg_cl_31=marg_cl_31,
            marg_cl_32=marg_cl_32,
            aos_cl_wii=aos_cl_wii,
            msdw_tfts=msdw_tfts,
            m_sc=m_sc,
            ans_op=ans_op,
            marg_ot_02=marg_ot_02,
            marg_ot_01=marg_ot_01,
            marg_cl_0_=marg_cl_0_,
            mow_gtb=mow_gtb,
            m_st=m_st,
            kf_cih=kf_cih,
            msl_ao=msl_ao,
            mow_conc=mow_conc,
            msdw_rc=msdw_rc,
            marg_cl_02=marg_cl_02,
            aos_hhw_tc=aos_hhw_tc,
            marg_cl_01=marg_cl_01,
            main_ot_f=main_ot_f,
            msl_se=msl_se,
            mof_mud=mof_mud,
            hhs_6_8=hhs_6_8,
            aos_smm=aos_smm,
            mof_wb=mof_wb,
            main_ot_m=main_ot_m,
            mor_gr_th_=mor_gr_th_,
            marg_ot_0_=marg_ot_0_,
            main_ot_p=main_ot_p,
            total=total,
            msdw_os=msdw_os,
            tfufc_nc=tfufc_nc,
            mor_ss=mor_ss,
            marg_al_f=marg_al_f,
            hh_cond_11=hh_cond_11,
            mc_1=mc_1,
            m_lit=m_lit,
            hh_tscs_ns=hh_tscs_ns,
            mc_2=mc_2,
            marg_al_m=marg_al_m,
            mc_3=mc_3,
            msdw_tfuts=msdw_tfuts,
            hh_cond_10=hh_cond_10,
            mc_4=mc_4,
            ldws_wp=ldws_wp,
            marg_al_p=marg_al_p,
            mof_stone=mof_stone,
            pl_wsvi=pl_wsvi,
            mdds_st=mdds_st,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FeatureCollectionGeoJSON",
            '400': "Exception400",
            '500': "Exception500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_features_with_http_info(
        self,
        bbox_crs: Optional[StrictStr] = None,
        crs: Optional[StrictStr] = None,
        bbox: Annotated[Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=4, max_length=6)]], Field(description="Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)  If the value consists of four numbers, the coordinate reference system is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  If the value consists of six numbers, the coordinate reference system is WGS 84 longitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  The query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate Reference Systems by Reference.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.")] = None,
        datetime: Annotated[Optional[StrictStr], Field(description="Either a date-time or an interval. Date and time expressions adhere to RFC 3339. Intervals may be bounded or half-bounded (double-dots at start or end).  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only features that have a temporal property that intersects the value of `datetime` are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.")] = None,
        limit: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=2000000, strict=True, ge=1)]], Field(description="OGC Resource server also offers way to paginate the result for queries.  If a query returns large number of records then user can use additional parameters in query parameters to limit numbers of records  to be returned.  Minimum = 0. Maximum = 1000. Default = 10.")] = None,
        tot_m: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_f: Optional[Union[StrictFloat, StrictInt]] = None,
        fpfl_os: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_ner1: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_ner2: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_bb: Optional[Union[StrictFloat, StrictInt]] = None,
        non_work_p: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_32: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_31: Optional[Union[StrictFloat, StrictInt]] = None,
        wwoc_nd: Optional[Union[StrictFloat, StrictInt]] = None,
        non_work_m: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_aom: Optional[Union[StrictFloat, StrictInt]] = None,
        non_work_f: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_mft: Optional[Union[StrictFloat, StrictInt]] = None,
        f_ill: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_vt: Optional[StrictStr] = None,
        tfufc_elc: Optional[Union[StrictFloat, StrictInt]] = None,
        main_cl_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_conc: Optional[Union[StrictFloat, StrictInt]] = None,
        sl_nsrbh: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_uc: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_gimas: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_hk: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_dt: Optional[StrictStr] = None,
        mow_wood: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_tt: Optional[Union[StrictFloat, StrictInt]] = None,
        os_ren: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_bb: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_el: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_kr: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_pl_pol: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__3: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__4: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__1: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__2: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__7: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_cem: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__8: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__5: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__6: Optional[Union[StrictFloat, StrictInt]] = None,
        ans_pl: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__9: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_5_: Optional[Union[StrictFloat, StrictInt]] = None,
        mainwork_m: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_4: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_5: Optional[Union[StrictFloat, StrictInt]] = None,
        fpfl_pss: Optional[Union[StrictFloat, StrictInt]] = None,
        mainwork_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_mub: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_sp: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_tot: Optional[Union[StrictFloat, StrictInt]] = None,
        mainwork_f: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_mmt: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_1: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_2: Optional[Union[StrictFloat, StrictInt]] = None,
        os_non: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_3: Optional[Union[StrictFloat, StrictInt]] = None,
        main_cl_m: Optional[Union[StrictFloat, StrictInt]] = None,
        no_hh: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_sdt: Optional[StrictStr] = None,
        main_cl_f: Optional[Union[StrictFloat, StrictInt]] = None,
        wwoc_od: Optional[Union[StrictFloat, StrictInt]] = None,
        sl_nssba: Optional[Union[StrictFloat, StrictInt]] = None,
        p_06: Optional[Union[StrictFloat, StrictInt]] = None,
        nhhnhl: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_coh: Optional[Union[StrictFloat, StrictInt]] = None,
        ldws_a: Optional[Union[StrictFloat, StrictInt]] = None,
        tnhh_abs: Optional[Union[StrictFloat, StrictInt]] = None,
        fpfl_st: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_hp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tm_bot: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_gi_mas: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_aom: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tpl: Optional[Union[StrictFloat, StrictInt]] = None,
        p_st: Optional[Union[StrictFloat, StrictInt]] = None,
        p_lit: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_hmt: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_4_r: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tel: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_31: Optional[Union[StrictFloat, StrictInt]] = None,
        os_ow: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_bb: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_f: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_hk1: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_aom: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_32: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_p: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_31: Optional[Union[StrictFloat, StrictInt]] = None,
        p_sc: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_32: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_3_r: Optional[Union[StrictFloat, StrictInt]] = None,
        f_06: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_tr: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_f: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_ner: Optional[Union[StrictFloat, StrictInt]] = None,
        f_sc: Optional[Union[StrictFloat, StrictInt]] = None,
        nhh_hbfw_1: Optional[Union[StrictFloat, StrictInt]] = None,
        nhh_hbfw_2: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_p: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_01: Optional[Union[StrictFloat, StrictInt]] = None,
        ldws_np: Optional[Union[StrictFloat, StrictInt]] = None,
        f_st: Optional[Union[StrictFloat, StrictInt]] = None,
        main_al_p: Optional[Union[StrictFloat, StrictInt]] = None,
        wwoc_cd: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_02: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_4: Optional[Union[StrictFloat, StrictInt]] = None,
        os_ao: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_3: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_2: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_1: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_0: Optional[Union[StrictFloat, StrictInt]] = None,
        st_name: Optional[StrictStr] = None,
        nhh_hlf: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_5: Optional[Union[StrictFloat, StrictInt]] = None,
        f_lit: Optional[Union[StrictFloat, StrictInt]] = None,
        sdt_name: Optional[StrictStr] = None,
        msl_kr: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_pl_pol: Optional[Union[StrictFloat, StrictInt]] = None,
        m_ill: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_lpg_: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_cc: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_snpwm: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_: Optional[Union[StrictFloat, StrictInt]] = None,
        dt_name: Optional[StrictStr] = None,
        kf_dnhk1: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_02: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_01: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_work_p: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_work_m: Optional[Union[StrictFloat, StrictInt]] = None,
        m_06: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_m: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_work_f: Optional[Union[StrictFloat, StrictInt]] = None,
        main_al_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_p: Optional[Union[StrictFloat, StrictInt]] = None,
        main_al_f: Optional[Union[StrictFloat, StrictInt]] = None,
        pl_wsop: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_f: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tm_mo: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_nl: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_ool: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_dnhk: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_cr: Optional[Union[StrictFloat, StrictInt]] = None,
        main_hh_p: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_9_: Optional[Union[StrictFloat, StrictInt]] = None,
        main_hh_m: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tm_lo: Optional[Union[StrictFloat, StrictInt]] = None,
        main_hh_f: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_p: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_or: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_nc: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_ucw: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_noasic: Optional[Union[StrictFloat, StrictInt]] = None,
        vt_name: Optional[StrictStr] = None,
        mow_spwm: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_cl_win: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_sp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_s: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_ao: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_cw: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_cjv: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_f: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tb: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_p: Optional[Union[StrictFloat, StrictInt]] = None,
        p_ill: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_bi: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_bio: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond_ch: Optional[Union[StrictFloat, StrictInt]] = None,
        nsdiod: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_clc: Optional[Union[StrictFloat, StrictInt]] = None,
        nhh_hbfwtp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_31: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_32: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_cl_wii: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tfts: Optional[Union[StrictFloat, StrictInt]] = None,
        m_sc: Optional[Union[StrictFloat, StrictInt]] = None,
        ans_op: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_02: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_01: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_gtb: Optional[Union[StrictFloat, StrictInt]] = None,
        m_st: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_cih: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_ao: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_conc: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_rc: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_02: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_hhw_tc: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_01: Optional[Union[StrictFloat, StrictInt]] = None,
        main_ot_f: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_se: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_mud: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_6_8: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_smm: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_wb: Optional[Union[StrictFloat, StrictInt]] = None,
        main_ot_m: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_gr_th_: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        main_ot_p: Optional[Union[StrictFloat, StrictInt]] = None,
        total: Optional[StrictStr] = None,
        msdw_os: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_nc: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_ss: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_f: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond_11: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_1: Optional[Union[StrictFloat, StrictInt]] = None,
        m_lit: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_ns: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_2: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_m: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_3: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tfuts: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond_10: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_4: Optional[Union[StrictFloat, StrictInt]] = None,
        ldws_wp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_stone: Optional[Union[StrictFloat, StrictInt]] = None,
        pl_wsvi: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_st: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FeatureCollectionGeoJSON]:
        """Get features from Primary Census Abstract (2011) for Kamrup Metropolitan district in Assam at village level


        :param bbox_crs:
        :type bbox_crs: str
        :param crs:
        :type crs: str
        :param bbox: Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)  If the value consists of four numbers, the coordinate reference system is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  If the value consists of six numbers, the coordinate reference system is WGS 84 longitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  The query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate Reference Systems by Reference.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
        :type bbox: List[float]
        :param datetime: Either a date-time or an interval. Date and time expressions adhere to RFC 3339. Intervals may be bounded or half-bounded (double-dots at start or end).  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only features that have a temporal property that intersects the value of `datetime` are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.
        :type datetime: str
        :param limit:
        :type limit: int
        :param offset: OGC Resource server also offers way to paginate the result for queries.  If a query returns large number of records then user can use additional parameters in query parameters to limit numbers of records  to be returned.  Minimum = 0. Maximum = 1000. Default = 10.
        :type offset: int
        :param tot_m:
        :type tot_m: float
        :param tot_f:
        :type tot_f: float
        :param fpfl_os:
        :type fpfl_os: float
        :param ndr_ner1:
        :type ndr_ner1: float
        :param ndr_ner2:
        :type ndr_ner2: float
        :param mor_bb:
        :type mor_bb: float
        :param non_work_p:
        :type non_work_p: float
        :param marg_ot_32:
        :type marg_ot_32: float
        :param marg_ot_31:
        :type marg_ot_31: float
        :param wwoc_nd:
        :type wwoc_nd: float
        :param non_work_m:
        :type non_work_m: float
        :param tot_p:
        :type tot_p: float
        :param mof_aom:
        :type mof_aom: float
        :param non_work_f:
        :type non_work_f: float
        :param mof_mft:
        :type mof_mft: float
        :param f_ill:
        :type f_ill: float
        :param mdds_vt:
        :type mdds_vt: str
        :param tfufc_elc:
        :type tfufc_elc: float
        :param main_cl_p:
        :type main_cl_p: float
        :param mor_conc:
        :type mor_conc: float
        :param sl_nsrbh:
        :type sl_nsrbh: float
        :param hh_tscs_uc:
        :type hh_tscs_uc: float
        :param mow_gimas:
        :type mow_gimas: float
        :param kf_hk:
        :type kf_hk: float
        :param mdds_dt:
        :type mdds_dt: str
        :param mow_wood:
        :type mow_wood: float
        :param hh_tscs_tt:
        :type hh_tscs_tt: float
        :param os_ren:
        :type os_ren: float
        :param mow_bb:
        :type mow_bb: float
        :param msl_el:
        :type msl_el: float
        :param tfufc_kr:
        :type tfufc_kr: float
        :param mor_pl_pol:
        :type mor_pl_pol: float
        :param marg_ot_3_:
        :type marg_ot_3_: float
        :param hh_cond__3:
        :type hh_cond__3: float
        :param hh_cond__4:
        :type hh_cond__4: float
        :param hh_cond__1:
        :type hh_cond__1: float
        :param hh_cond__2:
        :type hh_cond__2: float
        :param hh_cond__7:
        :type hh_cond__7: float
        :param mof_cem:
        :type mof_cem: float
        :param hh_cond__8:
        :type hh_cond__8: float
        :param hh_cond__5:
        :type hh_cond__5: float
        :param hh_cond__6:
        :type hh_cond__6: float
        :param ans_pl:
        :type ans_pl: float
        :param hh_cond__9:
        :type hh_cond__9: float
        :param marg_cl_3_:
        :type marg_cl_3_: float
        :param mc_5_:
        :type mc_5_: float
        :param mainwork_m:
        :type mainwork_m: float
        :param hhs_4:
        :type hhs_4: float
        :param hhs_5:
        :type hhs_5: float
        :param fpfl_pss:
        :type fpfl_pss: float
        :param mainwork_p:
        :type mainwork_p: float
        :param mow_mub:
        :type mow_mub: float
        :param hh_tscs_sp:
        :type hh_tscs_sp: float
        :param kf_tot:
        :type kf_tot: float
        :param mainwork_f:
        :type mainwork_f: float
        :param mor_mmt:
        :type mor_mmt: float
        :param hhs_1:
        :type hhs_1: float
        :param hhs_2:
        :type hhs_2: float
        :param os_non:
        :type os_non: float
        :param hhs_3:
        :type hhs_3: float
        :param main_cl_m:
        :type main_cl_m: float
        :param no_hh:
        :type no_hh: float
        :param mdds_sdt:
        :type mdds_sdt: str
        :param main_cl_f:
        :type main_cl_f: float
        :param wwoc_od:
        :type wwoc_od: float
        :param sl_nssba:
        :type sl_nssba: float
        :param p_06:
        :type p_06: float
        :param nhhnhl:
        :type nhhnhl: float
        :param kf_coh:
        :type kf_coh: float
        :param ldws_a:
        :type ldws_a: float
        :param tnhh_abs:
        :type tnhh_abs: float
        :param fpfl_st:
        :type fpfl_st: float
        :param msdw_hp:
        :type msdw_hp: float
        :param marg_al_0_:
        :type marg_al_0_: float
        :param aos_tm_bot:
        :type aos_tm_bot: float
        :param mor_gi_mas:
        :type mor_gi_mas: float
        :param mow_aom:
        :type mow_aom: float
        :param marg_hh_3_:
        :type marg_hh_3_: float
        :param msdw_tpl:
        :type msdw_tpl: float
        :param p_st:
        :type p_st: float
        :param p_lit:
        :type p_lit: float
        :param mor_hmt:
        :type mor_hmt: float
        :param ndr_4_r:
        :type ndr_4_r: float
        :param aos_tel:
        :type aos_tel: float
        :param marg_hh_31:
        :type marg_hh_31: float
        :param os_ow:
        :type os_ow: float
        :param mof_bb:
        :type mof_bb: float
        :param marg_cl_f:
        :type marg_cl_f: float
        :param kf_hk1:
        :type kf_hk1: float
        :param mor_aom:
        :type mor_aom: float
        :param marg_cl_m:
        :type marg_cl_m: float
        :param marg_hh_32:
        :type marg_hh_32: float
        :param marg_cl_p:
        :type marg_cl_p: float
        :param marg_al_31:
        :type marg_al_31: float
        :param p_sc:
        :type p_sc: float
        :param marg_al_32:
        :type marg_al_32: float
        :param ndr_3_r:
        :type ndr_3_r: float
        :param f_06:
        :type f_06: float
        :param ndr_tr:
        :type ndr_tr: float
        :param margwork_f:
        :type margwork_f: float
        :param ndr_ner:
        :type ndr_ner: float
        :param f_sc:
        :type f_sc: float
        :param nhh_hbfw_1:
        :type nhh_hbfw_1: float
        :param nhh_hbfw_2:
        :type nhh_hbfw_2: float
        :param margwork_p:
        :type margwork_p: float
        :param margwork_m:
        :type margwork_m: float
        :param marg_al_01:
        :type marg_al_01: float
        :param ldws_np:
        :type ldws_np: float
        :param f_st:
        :type f_st: float
        :param main_al_p:
        :type main_al_p: float
        :param wwoc_cd:
        :type wwoc_cd: float
        :param marg_al_02:
        :type marg_al_02: float
        :param margwork_4:
        :type margwork_4: float
        :param os_ao:
        :type os_ao: float
        :param margwork_3:
        :type margwork_3: float
        :param margwork_2:
        :type margwork_2: float
        :param margwork_1:
        :type margwork_1: float
        :param margwork_0:
        :type margwork_0: float
        :param st_name:
        :type st_name: str
        :param nhh_hlf:
        :type nhh_hlf: float
        :param margwork_5:
        :type margwork_5: float
        :param f_lit:
        :type f_lit: float
        :param sdt_name:
        :type sdt_name: str
        :param msl_kr:
        :type msl_kr: float
        :param mow_pl_pol:
        :type mow_pl_pol: float
        :param m_ill:
        :type m_ill: float
        :param tfufc_lpg_:
        :type tfufc_lpg_: float
        :param tfufc_cc:
        :type tfufc_cc: float
        :param mow_snpwm:
        :type mow_snpwm: float
        :param aos_:
        :type aos_: float
        :param dt_name:
        :type dt_name: str
        :param kf_dnhk1:
        :type kf_dnhk1: float
        :param marg_hh_02:
        :type marg_hh_02: float
        :param marg_hh_01:
        :type marg_hh_01: float
        :param tot_work_p:
        :type tot_work_p: float
        :param tot_work_m:
        :type tot_work_m: float
        :param m_06:
        :type m_06: float
        :param marg_ot_m:
        :type marg_ot_m: float
        :param tot_work_f:
        :type tot_work_f: float
        :param main_al_m:
        :type main_al_m: float
        :param marg_ot_p:
        :type marg_ot_p: float
        :param main_al_f:
        :type main_al_f: float
        :param pl_wsop:
        :type pl_wsop: float
        :param marg_ot_f:
        :type marg_ot_f: float
        :param aos_tm_mo:
        :type aos_tm_mo: float
        :param msl_nl:
        :type msl_nl: float
        :param msl_ool:
        :type msl_ool: float
        :param kf_dnhk:
        :type kf_dnhk: float
        :param tfufc_cr:
        :type tfufc_cr: float
        :param main_hh_p:
        :type main_hh_p: float
        :param hhs_9_:
        :type hhs_9_: float
        :param main_hh_m:
        :type main_hh_m: float
        :param aos_tm_lo:
        :type aos_tm_lo: float
        :param main_hh_f:
        :type main_hh_f: float
        :param hh_tscs_p:
        :type hh_tscs_p: float
        :param ndr_or:
        :type ndr_or: float
        :param kf_nc:
        :type kf_nc: float
        :param msdw_ucw:
        :type msdw_ucw: float
        :param aos_noasic:
        :type aos_noasic: float
        :param vt_name:
        :type vt_name: str
        :param mow_spwm:
        :type mow_spwm: float
        :param aos_cl_win:
        :type aos_cl_win: float
        :param tfufc_:
        :type tfufc_: float
        :param msdw_sp:
        :type msdw_sp: float
        :param marg_al_3_:
        :type marg_al_3_: float
        :param hh_tscs_s:
        :type hh_tscs_s: float
        :param tfufc_ao:
        :type tfufc_ao: float
        :param msdw_cw:
        :type msdw_cw: float
        :param aos_cjv:
        :type aos_cjv: float
        :param marg_hh_f:
        :type marg_hh_f: float
        :param msdw_tb:
        :type msdw_tb: float
        :param marg_hh_0_:
        :type marg_hh_0_: float
        :param marg_hh_m:
        :type marg_hh_m: float
        :param marg_hh_p:
        :type marg_hh_p: float
        :param p_ill:
        :type p_ill: float
        :param aos_bi:
        :type aos_bi: float
        :param tfufc_bio:
        :type tfufc_bio: float
        :param hh_cond_ch:
        :type hh_cond_ch: float
        :param nsdiod:
        :type nsdiod: float
        :param tfufc_clc:
        :type tfufc_clc: float
        :param nhh_hbfwtp:
        :type nhh_hbfwtp: float
        :param marg_cl_31:
        :type marg_cl_31: float
        :param marg_cl_32:
        :type marg_cl_32: float
        :param aos_cl_wii:
        :type aos_cl_wii: float
        :param msdw_tfts:
        :type msdw_tfts: float
        :param m_sc:
        :type m_sc: float
        :param ans_op:
        :type ans_op: float
        :param marg_ot_02:
        :type marg_ot_02: float
        :param marg_ot_01:
        :type marg_ot_01: float
        :param marg_cl_0_:
        :type marg_cl_0_: float
        :param mow_gtb:
        :type mow_gtb: float
        :param m_st:
        :type m_st: float
        :param kf_cih:
        :type kf_cih: float
        :param msl_ao:
        :type msl_ao: float
        :param mow_conc:
        :type mow_conc: float
        :param msdw_rc:
        :type msdw_rc: float
        :param marg_cl_02:
        :type marg_cl_02: float
        :param aos_hhw_tc:
        :type aos_hhw_tc: float
        :param marg_cl_01:
        :type marg_cl_01: float
        :param main_ot_f:
        :type main_ot_f: float
        :param msl_se:
        :type msl_se: float
        :param mof_mud:
        :type mof_mud: float
        :param hhs_6_8:
        :type hhs_6_8: float
        :param aos_smm:
        :type aos_smm: float
        :param mof_wb:
        :type mof_wb: float
        :param main_ot_m:
        :type main_ot_m: float
        :param mor_gr_th_:
        :type mor_gr_th_: float
        :param marg_ot_0_:
        :type marg_ot_0_: float
        :param main_ot_p:
        :type main_ot_p: float
        :param total:
        :type total: str
        :param msdw_os:
        :type msdw_os: float
        :param tfufc_nc:
        :type tfufc_nc: float
        :param mor_ss:
        :type mor_ss: float
        :param marg_al_f:
        :type marg_al_f: float
        :param hh_cond_11:
        :type hh_cond_11: float
        :param mc_1:
        :type mc_1: float
        :param m_lit:
        :type m_lit: float
        :param hh_tscs_ns:
        :type hh_tscs_ns: float
        :param mc_2:
        :type mc_2: float
        :param marg_al_m:
        :type marg_al_m: float
        :param mc_3:
        :type mc_3: float
        :param msdw_tfuts:
        :type msdw_tfuts: float
        :param hh_cond_10:
        :type hh_cond_10: float
        :param mc_4:
        :type mc_4: float
        :param ldws_wp:
        :type ldws_wp: float
        :param marg_al_p:
        :type marg_al_p: float
        :param mof_stone:
        :type mof_stone: float
        :param pl_wsvi:
        :type pl_wsvi: float
        :param mdds_st:
        :type mdds_st: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_features_serialize(
            bbox_crs=bbox_crs,
            crs=crs,
            bbox=bbox,
            datetime=datetime,
            limit=limit,
            offset=offset,
            tot_m=tot_m,
            tot_f=tot_f,
            fpfl_os=fpfl_os,
            ndr_ner1=ndr_ner1,
            ndr_ner2=ndr_ner2,
            mor_bb=mor_bb,
            non_work_p=non_work_p,
            marg_ot_32=marg_ot_32,
            marg_ot_31=marg_ot_31,
            wwoc_nd=wwoc_nd,
            non_work_m=non_work_m,
            tot_p=tot_p,
            mof_aom=mof_aom,
            non_work_f=non_work_f,
            mof_mft=mof_mft,
            f_ill=f_ill,
            mdds_vt=mdds_vt,
            tfufc_elc=tfufc_elc,
            main_cl_p=main_cl_p,
            mor_conc=mor_conc,
            sl_nsrbh=sl_nsrbh,
            hh_tscs_uc=hh_tscs_uc,
            mow_gimas=mow_gimas,
            kf_hk=kf_hk,
            mdds_dt=mdds_dt,
            mow_wood=mow_wood,
            hh_tscs_tt=hh_tscs_tt,
            os_ren=os_ren,
            mow_bb=mow_bb,
            msl_el=msl_el,
            tfufc_kr=tfufc_kr,
            mor_pl_pol=mor_pl_pol,
            marg_ot_3_=marg_ot_3_,
            hh_cond__3=hh_cond__3,
            hh_cond__4=hh_cond__4,
            hh_cond__1=hh_cond__1,
            hh_cond__2=hh_cond__2,
            hh_cond__7=hh_cond__7,
            mof_cem=mof_cem,
            hh_cond__8=hh_cond__8,
            hh_cond__5=hh_cond__5,
            hh_cond__6=hh_cond__6,
            ans_pl=ans_pl,
            hh_cond__9=hh_cond__9,
            marg_cl_3_=marg_cl_3_,
            mc_5_=mc_5_,
            mainwork_m=mainwork_m,
            hhs_4=hhs_4,
            hhs_5=hhs_5,
            fpfl_pss=fpfl_pss,
            mainwork_p=mainwork_p,
            mow_mub=mow_mub,
            hh_tscs_sp=hh_tscs_sp,
            kf_tot=kf_tot,
            mainwork_f=mainwork_f,
            mor_mmt=mor_mmt,
            hhs_1=hhs_1,
            hhs_2=hhs_2,
            os_non=os_non,
            hhs_3=hhs_3,
            main_cl_m=main_cl_m,
            no_hh=no_hh,
            mdds_sdt=mdds_sdt,
            main_cl_f=main_cl_f,
            wwoc_od=wwoc_od,
            sl_nssba=sl_nssba,
            p_06=p_06,
            nhhnhl=nhhnhl,
            kf_coh=kf_coh,
            ldws_a=ldws_a,
            tnhh_abs=tnhh_abs,
            fpfl_st=fpfl_st,
            msdw_hp=msdw_hp,
            marg_al_0_=marg_al_0_,
            aos_tm_bot=aos_tm_bot,
            mor_gi_mas=mor_gi_mas,
            mow_aom=mow_aom,
            marg_hh_3_=marg_hh_3_,
            msdw_tpl=msdw_tpl,
            p_st=p_st,
            p_lit=p_lit,
            mor_hmt=mor_hmt,
            ndr_4_r=ndr_4_r,
            aos_tel=aos_tel,
            marg_hh_31=marg_hh_31,
            os_ow=os_ow,
            mof_bb=mof_bb,
            marg_cl_f=marg_cl_f,
            kf_hk1=kf_hk1,
            mor_aom=mor_aom,
            marg_cl_m=marg_cl_m,
            marg_hh_32=marg_hh_32,
            marg_cl_p=marg_cl_p,
            marg_al_31=marg_al_31,
            p_sc=p_sc,
            marg_al_32=marg_al_32,
            ndr_3_r=ndr_3_r,
            f_06=f_06,
            ndr_tr=ndr_tr,
            margwork_f=margwork_f,
            ndr_ner=ndr_ner,
            f_sc=f_sc,
            nhh_hbfw_1=nhh_hbfw_1,
            nhh_hbfw_2=nhh_hbfw_2,
            margwork_p=margwork_p,
            margwork_m=margwork_m,
            marg_al_01=marg_al_01,
            ldws_np=ldws_np,
            f_st=f_st,
            main_al_p=main_al_p,
            wwoc_cd=wwoc_cd,
            marg_al_02=marg_al_02,
            margwork_4=margwork_4,
            os_ao=os_ao,
            margwork_3=margwork_3,
            margwork_2=margwork_2,
            margwork_1=margwork_1,
            margwork_0=margwork_0,
            st_name=st_name,
            nhh_hlf=nhh_hlf,
            margwork_5=margwork_5,
            f_lit=f_lit,
            sdt_name=sdt_name,
            msl_kr=msl_kr,
            mow_pl_pol=mow_pl_pol,
            m_ill=m_ill,
            tfufc_lpg_=tfufc_lpg_,
            tfufc_cc=tfufc_cc,
            mow_snpwm=mow_snpwm,
            aos_=aos_,
            dt_name=dt_name,
            kf_dnhk1=kf_dnhk1,
            marg_hh_02=marg_hh_02,
            marg_hh_01=marg_hh_01,
            tot_work_p=tot_work_p,
            tot_work_m=tot_work_m,
            m_06=m_06,
            marg_ot_m=marg_ot_m,
            tot_work_f=tot_work_f,
            main_al_m=main_al_m,
            marg_ot_p=marg_ot_p,
            main_al_f=main_al_f,
            pl_wsop=pl_wsop,
            marg_ot_f=marg_ot_f,
            aos_tm_mo=aos_tm_mo,
            msl_nl=msl_nl,
            msl_ool=msl_ool,
            kf_dnhk=kf_dnhk,
            tfufc_cr=tfufc_cr,
            main_hh_p=main_hh_p,
            hhs_9_=hhs_9_,
            main_hh_m=main_hh_m,
            aos_tm_lo=aos_tm_lo,
            main_hh_f=main_hh_f,
            hh_tscs_p=hh_tscs_p,
            ndr_or=ndr_or,
            kf_nc=kf_nc,
            msdw_ucw=msdw_ucw,
            aos_noasic=aos_noasic,
            vt_name=vt_name,
            mow_spwm=mow_spwm,
            aos_cl_win=aos_cl_win,
            tfufc_=tfufc_,
            msdw_sp=msdw_sp,
            marg_al_3_=marg_al_3_,
            hh_tscs_s=hh_tscs_s,
            tfufc_ao=tfufc_ao,
            msdw_cw=msdw_cw,
            aos_cjv=aos_cjv,
            marg_hh_f=marg_hh_f,
            msdw_tb=msdw_tb,
            marg_hh_0_=marg_hh_0_,
            marg_hh_m=marg_hh_m,
            marg_hh_p=marg_hh_p,
            p_ill=p_ill,
            aos_bi=aos_bi,
            tfufc_bio=tfufc_bio,
            hh_cond_ch=hh_cond_ch,
            nsdiod=nsdiod,
            tfufc_clc=tfufc_clc,
            nhh_hbfwtp=nhh_hbfwtp,
            marg_cl_31=marg_cl_31,
            marg_cl_32=marg_cl_32,
            aos_cl_wii=aos_cl_wii,
            msdw_tfts=msdw_tfts,
            m_sc=m_sc,
            ans_op=ans_op,
            marg_ot_02=marg_ot_02,
            marg_ot_01=marg_ot_01,
            marg_cl_0_=marg_cl_0_,
            mow_gtb=mow_gtb,
            m_st=m_st,
            kf_cih=kf_cih,
            msl_ao=msl_ao,
            mow_conc=mow_conc,
            msdw_rc=msdw_rc,
            marg_cl_02=marg_cl_02,
            aos_hhw_tc=aos_hhw_tc,
            marg_cl_01=marg_cl_01,
            main_ot_f=main_ot_f,
            msl_se=msl_se,
            mof_mud=mof_mud,
            hhs_6_8=hhs_6_8,
            aos_smm=aos_smm,
            mof_wb=mof_wb,
            main_ot_m=main_ot_m,
            mor_gr_th_=mor_gr_th_,
            marg_ot_0_=marg_ot_0_,
            main_ot_p=main_ot_p,
            total=total,
            msdw_os=msdw_os,
            tfufc_nc=tfufc_nc,
            mor_ss=mor_ss,
            marg_al_f=marg_al_f,
            hh_cond_11=hh_cond_11,
            mc_1=mc_1,
            m_lit=m_lit,
            hh_tscs_ns=hh_tscs_ns,
            mc_2=mc_2,
            marg_al_m=marg_al_m,
            mc_3=mc_3,
            msdw_tfuts=msdw_tfuts,
            hh_cond_10=hh_cond_10,
            mc_4=mc_4,
            ldws_wp=ldws_wp,
            marg_al_p=marg_al_p,
            mof_stone=mof_stone,
            pl_wsvi=pl_wsvi,
            mdds_st=mdds_st,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FeatureCollectionGeoJSON",
            '400': "Exception400",
            '500': "Exception500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_features_without_preload_content(
        self,
        bbox_crs: Optional[StrictStr] = None,
        crs: Optional[StrictStr] = None,
        bbox: Annotated[Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=4, max_length=6)]], Field(description="Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)  If the value consists of four numbers, the coordinate reference system is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  If the value consists of six numbers, the coordinate reference system is WGS 84 longitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  The query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate Reference Systems by Reference.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.")] = None,
        datetime: Annotated[Optional[StrictStr], Field(description="Either a date-time or an interval. Date and time expressions adhere to RFC 3339. Intervals may be bounded or half-bounded (double-dots at start or end).  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only features that have a temporal property that intersects the value of `datetime` are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.")] = None,
        limit: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=2000000, strict=True, ge=1)]], Field(description="OGC Resource server also offers way to paginate the result for queries.  If a query returns large number of records then user can use additional parameters in query parameters to limit numbers of records  to be returned.  Minimum = 0. Maximum = 1000. Default = 10.")] = None,
        tot_m: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_f: Optional[Union[StrictFloat, StrictInt]] = None,
        fpfl_os: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_ner1: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_ner2: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_bb: Optional[Union[StrictFloat, StrictInt]] = None,
        non_work_p: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_32: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_31: Optional[Union[StrictFloat, StrictInt]] = None,
        wwoc_nd: Optional[Union[StrictFloat, StrictInt]] = None,
        non_work_m: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_aom: Optional[Union[StrictFloat, StrictInt]] = None,
        non_work_f: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_mft: Optional[Union[StrictFloat, StrictInt]] = None,
        f_ill: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_vt: Optional[StrictStr] = None,
        tfufc_elc: Optional[Union[StrictFloat, StrictInt]] = None,
        main_cl_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_conc: Optional[Union[StrictFloat, StrictInt]] = None,
        sl_nsrbh: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_uc: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_gimas: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_hk: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_dt: Optional[StrictStr] = None,
        mow_wood: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_tt: Optional[Union[StrictFloat, StrictInt]] = None,
        os_ren: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_bb: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_el: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_kr: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_pl_pol: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__3: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__4: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__1: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__2: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__7: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_cem: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__8: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__5: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__6: Optional[Union[StrictFloat, StrictInt]] = None,
        ans_pl: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond__9: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_5_: Optional[Union[StrictFloat, StrictInt]] = None,
        mainwork_m: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_4: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_5: Optional[Union[StrictFloat, StrictInt]] = None,
        fpfl_pss: Optional[Union[StrictFloat, StrictInt]] = None,
        mainwork_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_mub: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_sp: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_tot: Optional[Union[StrictFloat, StrictInt]] = None,
        mainwork_f: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_mmt: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_1: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_2: Optional[Union[StrictFloat, StrictInt]] = None,
        os_non: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_3: Optional[Union[StrictFloat, StrictInt]] = None,
        main_cl_m: Optional[Union[StrictFloat, StrictInt]] = None,
        no_hh: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_sdt: Optional[StrictStr] = None,
        main_cl_f: Optional[Union[StrictFloat, StrictInt]] = None,
        wwoc_od: Optional[Union[StrictFloat, StrictInt]] = None,
        sl_nssba: Optional[Union[StrictFloat, StrictInt]] = None,
        p_06: Optional[Union[StrictFloat, StrictInt]] = None,
        nhhnhl: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_coh: Optional[Union[StrictFloat, StrictInt]] = None,
        ldws_a: Optional[Union[StrictFloat, StrictInt]] = None,
        tnhh_abs: Optional[Union[StrictFloat, StrictInt]] = None,
        fpfl_st: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_hp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tm_bot: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_gi_mas: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_aom: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tpl: Optional[Union[StrictFloat, StrictInt]] = None,
        p_st: Optional[Union[StrictFloat, StrictInt]] = None,
        p_lit: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_hmt: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_4_r: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tel: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_31: Optional[Union[StrictFloat, StrictInt]] = None,
        os_ow: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_bb: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_f: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_hk1: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_aom: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_32: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_p: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_31: Optional[Union[StrictFloat, StrictInt]] = None,
        p_sc: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_32: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_3_r: Optional[Union[StrictFloat, StrictInt]] = None,
        f_06: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_tr: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_f: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_ner: Optional[Union[StrictFloat, StrictInt]] = None,
        f_sc: Optional[Union[StrictFloat, StrictInt]] = None,
        nhh_hbfw_1: Optional[Union[StrictFloat, StrictInt]] = None,
        nhh_hbfw_2: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_p: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_01: Optional[Union[StrictFloat, StrictInt]] = None,
        ldws_np: Optional[Union[StrictFloat, StrictInt]] = None,
        f_st: Optional[Union[StrictFloat, StrictInt]] = None,
        main_al_p: Optional[Union[StrictFloat, StrictInt]] = None,
        wwoc_cd: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_02: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_4: Optional[Union[StrictFloat, StrictInt]] = None,
        os_ao: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_3: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_2: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_1: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_0: Optional[Union[StrictFloat, StrictInt]] = None,
        st_name: Optional[StrictStr] = None,
        nhh_hlf: Optional[Union[StrictFloat, StrictInt]] = None,
        margwork_5: Optional[Union[StrictFloat, StrictInt]] = None,
        f_lit: Optional[Union[StrictFloat, StrictInt]] = None,
        sdt_name: Optional[StrictStr] = None,
        msl_kr: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_pl_pol: Optional[Union[StrictFloat, StrictInt]] = None,
        m_ill: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_lpg_: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_cc: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_snpwm: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_: Optional[Union[StrictFloat, StrictInt]] = None,
        dt_name: Optional[StrictStr] = None,
        kf_dnhk1: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_02: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_01: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_work_p: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_work_m: Optional[Union[StrictFloat, StrictInt]] = None,
        m_06: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_m: Optional[Union[StrictFloat, StrictInt]] = None,
        tot_work_f: Optional[Union[StrictFloat, StrictInt]] = None,
        main_al_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_p: Optional[Union[StrictFloat, StrictInt]] = None,
        main_al_f: Optional[Union[StrictFloat, StrictInt]] = None,
        pl_wsop: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_f: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tm_mo: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_nl: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_ool: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_dnhk: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_cr: Optional[Union[StrictFloat, StrictInt]] = None,
        main_hh_p: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_9_: Optional[Union[StrictFloat, StrictInt]] = None,
        main_hh_m: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_tm_lo: Optional[Union[StrictFloat, StrictInt]] = None,
        main_hh_f: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_p: Optional[Union[StrictFloat, StrictInt]] = None,
        ndr_or: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_nc: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_ucw: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_noasic: Optional[Union[StrictFloat, StrictInt]] = None,
        vt_name: Optional[StrictStr] = None,
        mow_spwm: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_cl_win: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_sp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_3_: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_s: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_ao: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_cw: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_cjv: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_f: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tb: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_m: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_hh_p: Optional[Union[StrictFloat, StrictInt]] = None,
        p_ill: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_bi: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_bio: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond_ch: Optional[Union[StrictFloat, StrictInt]] = None,
        nsdiod: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_clc: Optional[Union[StrictFloat, StrictInt]] = None,
        nhh_hbfwtp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_31: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_32: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_cl_wii: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tfts: Optional[Union[StrictFloat, StrictInt]] = None,
        m_sc: Optional[Union[StrictFloat, StrictInt]] = None,
        ans_op: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_02: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_01: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_gtb: Optional[Union[StrictFloat, StrictInt]] = None,
        m_st: Optional[Union[StrictFloat, StrictInt]] = None,
        kf_cih: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_ao: Optional[Union[StrictFloat, StrictInt]] = None,
        mow_conc: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_rc: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_02: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_hhw_tc: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_cl_01: Optional[Union[StrictFloat, StrictInt]] = None,
        main_ot_f: Optional[Union[StrictFloat, StrictInt]] = None,
        msl_se: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_mud: Optional[Union[StrictFloat, StrictInt]] = None,
        hhs_6_8: Optional[Union[StrictFloat, StrictInt]] = None,
        aos_smm: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_wb: Optional[Union[StrictFloat, StrictInt]] = None,
        main_ot_m: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_gr_th_: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_ot_0_: Optional[Union[StrictFloat, StrictInt]] = None,
        main_ot_p: Optional[Union[StrictFloat, StrictInt]] = None,
        total: Optional[StrictStr] = None,
        msdw_os: Optional[Union[StrictFloat, StrictInt]] = None,
        tfufc_nc: Optional[Union[StrictFloat, StrictInt]] = None,
        mor_ss: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_f: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond_11: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_1: Optional[Union[StrictFloat, StrictInt]] = None,
        m_lit: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_tscs_ns: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_2: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_m: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_3: Optional[Union[StrictFloat, StrictInt]] = None,
        msdw_tfuts: Optional[Union[StrictFloat, StrictInt]] = None,
        hh_cond_10: Optional[Union[StrictFloat, StrictInt]] = None,
        mc_4: Optional[Union[StrictFloat, StrictInt]] = None,
        ldws_wp: Optional[Union[StrictFloat, StrictInt]] = None,
        marg_al_p: Optional[Union[StrictFloat, StrictInt]] = None,
        mof_stone: Optional[Union[StrictFloat, StrictInt]] = None,
        pl_wsvi: Optional[Union[StrictFloat, StrictInt]] = None,
        mdds_st: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get features from Primary Census Abstract (2011) for Kamrup Metropolitan district in Assam at village level


        :param bbox_crs:
        :type bbox_crs: str
        :param crs:
        :type crs: str
        :param bbox: Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)  If the value consists of four numbers, the coordinate reference system is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  If the value consists of six numbers, the coordinate reference system is WGS 84 longitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  The query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate Reference Systems by Reference.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
        :type bbox: List[float]
        :param datetime: Either a date-time or an interval. Date and time expressions adhere to RFC 3339. Intervals may be bounded or half-bounded (double-dots at start or end).  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only features that have a temporal property that intersects the value of `datetime` are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.
        :type datetime: str
        :param limit:
        :type limit: int
        :param offset: OGC Resource server also offers way to paginate the result for queries.  If a query returns large number of records then user can use additional parameters in query parameters to limit numbers of records  to be returned.  Minimum = 0. Maximum = 1000. Default = 10.
        :type offset: int
        :param tot_m:
        :type tot_m: float
        :param tot_f:
        :type tot_f: float
        :param fpfl_os:
        :type fpfl_os: float
        :param ndr_ner1:
        :type ndr_ner1: float
        :param ndr_ner2:
        :type ndr_ner2: float
        :param mor_bb:
        :type mor_bb: float
        :param non_work_p:
        :type non_work_p: float
        :param marg_ot_32:
        :type marg_ot_32: float
        :param marg_ot_31:
        :type marg_ot_31: float
        :param wwoc_nd:
        :type wwoc_nd: float
        :param non_work_m:
        :type non_work_m: float
        :param tot_p:
        :type tot_p: float
        :param mof_aom:
        :type mof_aom: float
        :param non_work_f:
        :type non_work_f: float
        :param mof_mft:
        :type mof_mft: float
        :param f_ill:
        :type f_ill: float
        :param mdds_vt:
        :type mdds_vt: str
        :param tfufc_elc:
        :type tfufc_elc: float
        :param main_cl_p:
        :type main_cl_p: float
        :param mor_conc:
        :type mor_conc: float
        :param sl_nsrbh:
        :type sl_nsrbh: float
        :param hh_tscs_uc:
        :type hh_tscs_uc: float
        :param mow_gimas:
        :type mow_gimas: float
        :param kf_hk:
        :type kf_hk: float
        :param mdds_dt:
        :type mdds_dt: str
        :param mow_wood:
        :type mow_wood: float
        :param hh_tscs_tt:
        :type hh_tscs_tt: float
        :param os_ren:
        :type os_ren: float
        :param mow_bb:
        :type mow_bb: float
        :param msl_el:
        :type msl_el: float
        :param tfufc_kr:
        :type tfufc_kr: float
        :param mor_pl_pol:
        :type mor_pl_pol: float
        :param marg_ot_3_:
        :type marg_ot_3_: float
        :param hh_cond__3:
        :type hh_cond__3: float
        :param hh_cond__4:
        :type hh_cond__4: float
        :param hh_cond__1:
        :type hh_cond__1: float
        :param hh_cond__2:
        :type hh_cond__2: float
        :param hh_cond__7:
        :type hh_cond__7: float
        :param mof_cem:
        :type mof_cem: float
        :param hh_cond__8:
        :type hh_cond__8: float
        :param hh_cond__5:
        :type hh_cond__5: float
        :param hh_cond__6:
        :type hh_cond__6: float
        :param ans_pl:
        :type ans_pl: float
        :param hh_cond__9:
        :type hh_cond__9: float
        :param marg_cl_3_:
        :type marg_cl_3_: float
        :param mc_5_:
        :type mc_5_: float
        :param mainwork_m:
        :type mainwork_m: float
        :param hhs_4:
        :type hhs_4: float
        :param hhs_5:
        :type hhs_5: float
        :param fpfl_pss:
        :type fpfl_pss: float
        :param mainwork_p:
        :type mainwork_p: float
        :param mow_mub:
        :type mow_mub: float
        :param hh_tscs_sp:
        :type hh_tscs_sp: float
        :param kf_tot:
        :type kf_tot: float
        :param mainwork_f:
        :type mainwork_f: float
        :param mor_mmt:
        :type mor_mmt: float
        :param hhs_1:
        :type hhs_1: float
        :param hhs_2:
        :type hhs_2: float
        :param os_non:
        :type os_non: float
        :param hhs_3:
        :type hhs_3: float
        :param main_cl_m:
        :type main_cl_m: float
        :param no_hh:
        :type no_hh: float
        :param mdds_sdt:
        :type mdds_sdt: str
        :param main_cl_f:
        :type main_cl_f: float
        :param wwoc_od:
        :type wwoc_od: float
        :param sl_nssba:
        :type sl_nssba: float
        :param p_06:
        :type p_06: float
        :param nhhnhl:
        :type nhhnhl: float
        :param kf_coh:
        :type kf_coh: float
        :param ldws_a:
        :type ldws_a: float
        :param tnhh_abs:
        :type tnhh_abs: float
        :param fpfl_st:
        :type fpfl_st: float
        :param msdw_hp:
        :type msdw_hp: float
        :param marg_al_0_:
        :type marg_al_0_: float
        :param aos_tm_bot:
        :type aos_tm_bot: float
        :param mor_gi_mas:
        :type mor_gi_mas: float
        :param mow_aom:
        :type mow_aom: float
        :param marg_hh_3_:
        :type marg_hh_3_: float
        :param msdw_tpl:
        :type msdw_tpl: float
        :param p_st:
        :type p_st: float
        :param p_lit:
        :type p_lit: float
        :param mor_hmt:
        :type mor_hmt: float
        :param ndr_4_r:
        :type ndr_4_r: float
        :param aos_tel:
        :type aos_tel: float
        :param marg_hh_31:
        :type marg_hh_31: float
        :param os_ow:
        :type os_ow: float
        :param mof_bb:
        :type mof_bb: float
        :param marg_cl_f:
        :type marg_cl_f: float
        :param kf_hk1:
        :type kf_hk1: float
        :param mor_aom:
        :type mor_aom: float
        :param marg_cl_m:
        :type marg_cl_m: float
        :param marg_hh_32:
        :type marg_hh_32: float
        :param marg_cl_p:
        :type marg_cl_p: float
        :param marg_al_31:
        :type marg_al_31: float
        :param p_sc:
        :type p_sc: float
        :param marg_al_32:
        :type marg_al_32: float
        :param ndr_3_r:
        :type ndr_3_r: float
        :param f_06:
        :type f_06: float
        :param ndr_tr:
        :type ndr_tr: float
        :param margwork_f:
        :type margwork_f: float
        :param ndr_ner:
        :type ndr_ner: float
        :param f_sc:
        :type f_sc: float
        :param nhh_hbfw_1:
        :type nhh_hbfw_1: float
        :param nhh_hbfw_2:
        :type nhh_hbfw_2: float
        :param margwork_p:
        :type margwork_p: float
        :param margwork_m:
        :type margwork_m: float
        :param marg_al_01:
        :type marg_al_01: float
        :param ldws_np:
        :type ldws_np: float
        :param f_st:
        :type f_st: float
        :param main_al_p:
        :type main_al_p: float
        :param wwoc_cd:
        :type wwoc_cd: float
        :param marg_al_02:
        :type marg_al_02: float
        :param margwork_4:
        :type margwork_4: float
        :param os_ao:
        :type os_ao: float
        :param margwork_3:
        :type margwork_3: float
        :param margwork_2:
        :type margwork_2: float
        :param margwork_1:
        :type margwork_1: float
        :param margwork_0:
        :type margwork_0: float
        :param st_name:
        :type st_name: str
        :param nhh_hlf:
        :type nhh_hlf: float
        :param margwork_5:
        :type margwork_5: float
        :param f_lit:
        :type f_lit: float
        :param sdt_name:
        :type sdt_name: str
        :param msl_kr:
        :type msl_kr: float
        :param mow_pl_pol:
        :type mow_pl_pol: float
        :param m_ill:
        :type m_ill: float
        :param tfufc_lpg_:
        :type tfufc_lpg_: float
        :param tfufc_cc:
        :type tfufc_cc: float
        :param mow_snpwm:
        :type mow_snpwm: float
        :param aos_:
        :type aos_: float
        :param dt_name:
        :type dt_name: str
        :param kf_dnhk1:
        :type kf_dnhk1: float
        :param marg_hh_02:
        :type marg_hh_02: float
        :param marg_hh_01:
        :type marg_hh_01: float
        :param tot_work_p:
        :type tot_work_p: float
        :param tot_work_m:
        :type tot_work_m: float
        :param m_06:
        :type m_06: float
        :param marg_ot_m:
        :type marg_ot_m: float
        :param tot_work_f:
        :type tot_work_f: float
        :param main_al_m:
        :type main_al_m: float
        :param marg_ot_p:
        :type marg_ot_p: float
        :param main_al_f:
        :type main_al_f: float
        :param pl_wsop:
        :type pl_wsop: float
        :param marg_ot_f:
        :type marg_ot_f: float
        :param aos_tm_mo:
        :type aos_tm_mo: float
        :param msl_nl:
        :type msl_nl: float
        :param msl_ool:
        :type msl_ool: float
        :param kf_dnhk:
        :type kf_dnhk: float
        :param tfufc_cr:
        :type tfufc_cr: float
        :param main_hh_p:
        :type main_hh_p: float
        :param hhs_9_:
        :type hhs_9_: float
        :param main_hh_m:
        :type main_hh_m: float
        :param aos_tm_lo:
        :type aos_tm_lo: float
        :param main_hh_f:
        :type main_hh_f: float
        :param hh_tscs_p:
        :type hh_tscs_p: float
        :param ndr_or:
        :type ndr_or: float
        :param kf_nc:
        :type kf_nc: float
        :param msdw_ucw:
        :type msdw_ucw: float
        :param aos_noasic:
        :type aos_noasic: float
        :param vt_name:
        :type vt_name: str
        :param mow_spwm:
        :type mow_spwm: float
        :param aos_cl_win:
        :type aos_cl_win: float
        :param tfufc_:
        :type tfufc_: float
        :param msdw_sp:
        :type msdw_sp: float
        :param marg_al_3_:
        :type marg_al_3_: float
        :param hh_tscs_s:
        :type hh_tscs_s: float
        :param tfufc_ao:
        :type tfufc_ao: float
        :param msdw_cw:
        :type msdw_cw: float
        :param aos_cjv:
        :type aos_cjv: float
        :param marg_hh_f:
        :type marg_hh_f: float
        :param msdw_tb:
        :type msdw_tb: float
        :param marg_hh_0_:
        :type marg_hh_0_: float
        :param marg_hh_m:
        :type marg_hh_m: float
        :param marg_hh_p:
        :type marg_hh_p: float
        :param p_ill:
        :type p_ill: float
        :param aos_bi:
        :type aos_bi: float
        :param tfufc_bio:
        :type tfufc_bio: float
        :param hh_cond_ch:
        :type hh_cond_ch: float
        :param nsdiod:
        :type nsdiod: float
        :param tfufc_clc:
        :type tfufc_clc: float
        :param nhh_hbfwtp:
        :type nhh_hbfwtp: float
        :param marg_cl_31:
        :type marg_cl_31: float
        :param marg_cl_32:
        :type marg_cl_32: float
        :param aos_cl_wii:
        :type aos_cl_wii: float
        :param msdw_tfts:
        :type msdw_tfts: float
        :param m_sc:
        :type m_sc: float
        :param ans_op:
        :type ans_op: float
        :param marg_ot_02:
        :type marg_ot_02: float
        :param marg_ot_01:
        :type marg_ot_01: float
        :param marg_cl_0_:
        :type marg_cl_0_: float
        :param mow_gtb:
        :type mow_gtb: float
        :param m_st:
        :type m_st: float
        :param kf_cih:
        :type kf_cih: float
        :param msl_ao:
        :type msl_ao: float
        :param mow_conc:
        :type mow_conc: float
        :param msdw_rc:
        :type msdw_rc: float
        :param marg_cl_02:
        :type marg_cl_02: float
        :param aos_hhw_tc:
        :type aos_hhw_tc: float
        :param marg_cl_01:
        :type marg_cl_01: float
        :param main_ot_f:
        :type main_ot_f: float
        :param msl_se:
        :type msl_se: float
        :param mof_mud:
        :type mof_mud: float
        :param hhs_6_8:
        :type hhs_6_8: float
        :param aos_smm:
        :type aos_smm: float
        :param mof_wb:
        :type mof_wb: float
        :param main_ot_m:
        :type main_ot_m: float
        :param mor_gr_th_:
        :type mor_gr_th_: float
        :param marg_ot_0_:
        :type marg_ot_0_: float
        :param main_ot_p:
        :type main_ot_p: float
        :param total:
        :type total: str
        :param msdw_os:
        :type msdw_os: float
        :param tfufc_nc:
        :type tfufc_nc: float
        :param mor_ss:
        :type mor_ss: float
        :param marg_al_f:
        :type marg_al_f: float
        :param hh_cond_11:
        :type hh_cond_11: float
        :param mc_1:
        :type mc_1: float
        :param m_lit:
        :type m_lit: float
        :param hh_tscs_ns:
        :type hh_tscs_ns: float
        :param mc_2:
        :type mc_2: float
        :param marg_al_m:
        :type marg_al_m: float
        :param mc_3:
        :type mc_3: float
        :param msdw_tfuts:
        :type msdw_tfuts: float
        :param hh_cond_10:
        :type hh_cond_10: float
        :param mc_4:
        :type mc_4: float
        :param ldws_wp:
        :type ldws_wp: float
        :param marg_al_p:
        :type marg_al_p: float
        :param mof_stone:
        :type mof_stone: float
        :param pl_wsvi:
        :type pl_wsvi: float
        :param mdds_st:
        :type mdds_st: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_features_serialize(
            bbox_crs=bbox_crs,
            crs=crs,
            bbox=bbox,
            datetime=datetime,
            limit=limit,
            offset=offset,
            tot_m=tot_m,
            tot_f=tot_f,
            fpfl_os=fpfl_os,
            ndr_ner1=ndr_ner1,
            ndr_ner2=ndr_ner2,
            mor_bb=mor_bb,
            non_work_p=non_work_p,
            marg_ot_32=marg_ot_32,
            marg_ot_31=marg_ot_31,
            wwoc_nd=wwoc_nd,
            non_work_m=non_work_m,
            tot_p=tot_p,
            mof_aom=mof_aom,
            non_work_f=non_work_f,
            mof_mft=mof_mft,
            f_ill=f_ill,
            mdds_vt=mdds_vt,
            tfufc_elc=tfufc_elc,
            main_cl_p=main_cl_p,
            mor_conc=mor_conc,
            sl_nsrbh=sl_nsrbh,
            hh_tscs_uc=hh_tscs_uc,
            mow_gimas=mow_gimas,
            kf_hk=kf_hk,
            mdds_dt=mdds_dt,
            mow_wood=mow_wood,
            hh_tscs_tt=hh_tscs_tt,
            os_ren=os_ren,
            mow_bb=mow_bb,
            msl_el=msl_el,
            tfufc_kr=tfufc_kr,
            mor_pl_pol=mor_pl_pol,
            marg_ot_3_=marg_ot_3_,
            hh_cond__3=hh_cond__3,
            hh_cond__4=hh_cond__4,
            hh_cond__1=hh_cond__1,
            hh_cond__2=hh_cond__2,
            hh_cond__7=hh_cond__7,
            mof_cem=mof_cem,
            hh_cond__8=hh_cond__8,
            hh_cond__5=hh_cond__5,
            hh_cond__6=hh_cond__6,
            ans_pl=ans_pl,
            hh_cond__9=hh_cond__9,
            marg_cl_3_=marg_cl_3_,
            mc_5_=mc_5_,
            mainwork_m=mainwork_m,
            hhs_4=hhs_4,
            hhs_5=hhs_5,
            fpfl_pss=fpfl_pss,
            mainwork_p=mainwork_p,
            mow_mub=mow_mub,
            hh_tscs_sp=hh_tscs_sp,
            kf_tot=kf_tot,
            mainwork_f=mainwork_f,
            mor_mmt=mor_mmt,
            hhs_1=hhs_1,
            hhs_2=hhs_2,
            os_non=os_non,
            hhs_3=hhs_3,
            main_cl_m=main_cl_m,
            no_hh=no_hh,
            mdds_sdt=mdds_sdt,
            main_cl_f=main_cl_f,
            wwoc_od=wwoc_od,
            sl_nssba=sl_nssba,
            p_06=p_06,
            nhhnhl=nhhnhl,
            kf_coh=kf_coh,
            ldws_a=ldws_a,
            tnhh_abs=tnhh_abs,
            fpfl_st=fpfl_st,
            msdw_hp=msdw_hp,
            marg_al_0_=marg_al_0_,
            aos_tm_bot=aos_tm_bot,
            mor_gi_mas=mor_gi_mas,
            mow_aom=mow_aom,
            marg_hh_3_=marg_hh_3_,
            msdw_tpl=msdw_tpl,
            p_st=p_st,
            p_lit=p_lit,
            mor_hmt=mor_hmt,
            ndr_4_r=ndr_4_r,
            aos_tel=aos_tel,
            marg_hh_31=marg_hh_31,
            os_ow=os_ow,
            mof_bb=mof_bb,
            marg_cl_f=marg_cl_f,
            kf_hk1=kf_hk1,
            mor_aom=mor_aom,
            marg_cl_m=marg_cl_m,
            marg_hh_32=marg_hh_32,
            marg_cl_p=marg_cl_p,
            marg_al_31=marg_al_31,
            p_sc=p_sc,
            marg_al_32=marg_al_32,
            ndr_3_r=ndr_3_r,
            f_06=f_06,
            ndr_tr=ndr_tr,
            margwork_f=margwork_f,
            ndr_ner=ndr_ner,
            f_sc=f_sc,
            nhh_hbfw_1=nhh_hbfw_1,
            nhh_hbfw_2=nhh_hbfw_2,
            margwork_p=margwork_p,
            margwork_m=margwork_m,
            marg_al_01=marg_al_01,
            ldws_np=ldws_np,
            f_st=f_st,
            main_al_p=main_al_p,
            wwoc_cd=wwoc_cd,
            marg_al_02=marg_al_02,
            margwork_4=margwork_4,
            os_ao=os_ao,
            margwork_3=margwork_3,
            margwork_2=margwork_2,
            margwork_1=margwork_1,
            margwork_0=margwork_0,
            st_name=st_name,
            nhh_hlf=nhh_hlf,
            margwork_5=margwork_5,
            f_lit=f_lit,
            sdt_name=sdt_name,
            msl_kr=msl_kr,
            mow_pl_pol=mow_pl_pol,
            m_ill=m_ill,
            tfufc_lpg_=tfufc_lpg_,
            tfufc_cc=tfufc_cc,
            mow_snpwm=mow_snpwm,
            aos_=aos_,
            dt_name=dt_name,
            kf_dnhk1=kf_dnhk1,
            marg_hh_02=marg_hh_02,
            marg_hh_01=marg_hh_01,
            tot_work_p=tot_work_p,
            tot_work_m=tot_work_m,
            m_06=m_06,
            marg_ot_m=marg_ot_m,
            tot_work_f=tot_work_f,
            main_al_m=main_al_m,
            marg_ot_p=marg_ot_p,
            main_al_f=main_al_f,
            pl_wsop=pl_wsop,
            marg_ot_f=marg_ot_f,
            aos_tm_mo=aos_tm_mo,
            msl_nl=msl_nl,
            msl_ool=msl_ool,
            kf_dnhk=kf_dnhk,
            tfufc_cr=tfufc_cr,
            main_hh_p=main_hh_p,
            hhs_9_=hhs_9_,
            main_hh_m=main_hh_m,
            aos_tm_lo=aos_tm_lo,
            main_hh_f=main_hh_f,
            hh_tscs_p=hh_tscs_p,
            ndr_or=ndr_or,
            kf_nc=kf_nc,
            msdw_ucw=msdw_ucw,
            aos_noasic=aos_noasic,
            vt_name=vt_name,
            mow_spwm=mow_spwm,
            aos_cl_win=aos_cl_win,
            tfufc_=tfufc_,
            msdw_sp=msdw_sp,
            marg_al_3_=marg_al_3_,
            hh_tscs_s=hh_tscs_s,
            tfufc_ao=tfufc_ao,
            msdw_cw=msdw_cw,
            aos_cjv=aos_cjv,
            marg_hh_f=marg_hh_f,
            msdw_tb=msdw_tb,
            marg_hh_0_=marg_hh_0_,
            marg_hh_m=marg_hh_m,
            marg_hh_p=marg_hh_p,
            p_ill=p_ill,
            aos_bi=aos_bi,
            tfufc_bio=tfufc_bio,
            hh_cond_ch=hh_cond_ch,
            nsdiod=nsdiod,
            tfufc_clc=tfufc_clc,
            nhh_hbfwtp=nhh_hbfwtp,
            marg_cl_31=marg_cl_31,
            marg_cl_32=marg_cl_32,
            aos_cl_wii=aos_cl_wii,
            msdw_tfts=msdw_tfts,
            m_sc=m_sc,
            ans_op=ans_op,
            marg_ot_02=marg_ot_02,
            marg_ot_01=marg_ot_01,
            marg_cl_0_=marg_cl_0_,
            mow_gtb=mow_gtb,
            m_st=m_st,
            kf_cih=kf_cih,
            msl_ao=msl_ao,
            mow_conc=mow_conc,
            msdw_rc=msdw_rc,
            marg_cl_02=marg_cl_02,
            aos_hhw_tc=aos_hhw_tc,
            marg_cl_01=marg_cl_01,
            main_ot_f=main_ot_f,
            msl_se=msl_se,
            mof_mud=mof_mud,
            hhs_6_8=hhs_6_8,
            aos_smm=aos_smm,
            mof_wb=mof_wb,
            main_ot_m=main_ot_m,
            mor_gr_th_=mor_gr_th_,
            marg_ot_0_=marg_ot_0_,
            main_ot_p=main_ot_p,
            total=total,
            msdw_os=msdw_os,
            tfufc_nc=tfufc_nc,
            mor_ss=mor_ss,
            marg_al_f=marg_al_f,
            hh_cond_11=hh_cond_11,
            mc_1=mc_1,
            m_lit=m_lit,
            hh_tscs_ns=hh_tscs_ns,
            mc_2=mc_2,
            marg_al_m=marg_al_m,
            mc_3=mc_3,
            msdw_tfuts=msdw_tfuts,
            hh_cond_10=hh_cond_10,
            mc_4=mc_4,
            ldws_wp=ldws_wp,
            marg_al_p=marg_al_p,
            mof_stone=mof_stone,
            pl_wsvi=pl_wsvi,
            mdds_st=mdds_st,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FeatureCollectionGeoJSON",
            '400': "Exception400",
            '500': "Exception500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_features_serialize(
        self,
        bbox_crs,
        crs,
        bbox,
        datetime,
        limit,
        offset,
        tot_m,
        tot_f,
        fpfl_os,
        ndr_ner1,
        ndr_ner2,
        mor_bb,
        non_work_p,
        marg_ot_32,
        marg_ot_31,
        wwoc_nd,
        non_work_m,
        tot_p,
        mof_aom,
        non_work_f,
        mof_mft,
        f_ill,
        mdds_vt,
        tfufc_elc,
        main_cl_p,
        mor_conc,
        sl_nsrbh,
        hh_tscs_uc,
        mow_gimas,
        kf_hk,
        mdds_dt,
        mow_wood,
        hh_tscs_tt,
        os_ren,
        mow_bb,
        msl_el,
        tfufc_kr,
        mor_pl_pol,
        marg_ot_3_,
        hh_cond__3,
        hh_cond__4,
        hh_cond__1,
        hh_cond__2,
        hh_cond__7,
        mof_cem,
        hh_cond__8,
        hh_cond__5,
        hh_cond__6,
        ans_pl,
        hh_cond__9,
        marg_cl_3_,
        mc_5_,
        mainwork_m,
        hhs_4,
        hhs_5,
        fpfl_pss,
        mainwork_p,
        mow_mub,
        hh_tscs_sp,
        kf_tot,
        mainwork_f,
        mor_mmt,
        hhs_1,
        hhs_2,
        os_non,
        hhs_3,
        main_cl_m,
        no_hh,
        mdds_sdt,
        main_cl_f,
        wwoc_od,
        sl_nssba,
        p_06,
        nhhnhl,
        kf_coh,
        ldws_a,
        tnhh_abs,
        fpfl_st,
        msdw_hp,
        marg_al_0_,
        aos_tm_bot,
        mor_gi_mas,
        mow_aom,
        marg_hh_3_,
        msdw_tpl,
        p_st,
        p_lit,
        mor_hmt,
        ndr_4_r,
        aos_tel,
        marg_hh_31,
        os_ow,
        mof_bb,
        marg_cl_f,
        kf_hk1,
        mor_aom,
        marg_cl_m,
        marg_hh_32,
        marg_cl_p,
        marg_al_31,
        p_sc,
        marg_al_32,
        ndr_3_r,
        f_06,
        ndr_tr,
        margwork_f,
        ndr_ner,
        f_sc,
        nhh_hbfw_1,
        nhh_hbfw_2,
        margwork_p,
        margwork_m,
        marg_al_01,
        ldws_np,
        f_st,
        main_al_p,
        wwoc_cd,
        marg_al_02,
        margwork_4,
        os_ao,
        margwork_3,
        margwork_2,
        margwork_1,
        margwork_0,
        st_name,
        nhh_hlf,
        margwork_5,
        f_lit,
        sdt_name,
        msl_kr,
        mow_pl_pol,
        m_ill,
        tfufc_lpg_,
        tfufc_cc,
        mow_snpwm,
        aos_,
        dt_name,
        kf_dnhk1,
        marg_hh_02,
        marg_hh_01,
        tot_work_p,
        tot_work_m,
        m_06,
        marg_ot_m,
        tot_work_f,
        main_al_m,
        marg_ot_p,
        main_al_f,
        pl_wsop,
        marg_ot_f,
        aos_tm_mo,
        msl_nl,
        msl_ool,
        kf_dnhk,
        tfufc_cr,
        main_hh_p,
        hhs_9_,
        main_hh_m,
        aos_tm_lo,
        main_hh_f,
        hh_tscs_p,
        ndr_or,
        kf_nc,
        msdw_ucw,
        aos_noasic,
        vt_name,
        mow_spwm,
        aos_cl_win,
        tfufc_,
        msdw_sp,
        marg_al_3_,
        hh_tscs_s,
        tfufc_ao,
        msdw_cw,
        aos_cjv,
        marg_hh_f,
        msdw_tb,
        marg_hh_0_,
        marg_hh_m,
        marg_hh_p,
        p_ill,
        aos_bi,
        tfufc_bio,
        hh_cond_ch,
        nsdiod,
        tfufc_clc,
        nhh_hbfwtp,
        marg_cl_31,
        marg_cl_32,
        aos_cl_wii,
        msdw_tfts,
        m_sc,
        ans_op,
        marg_ot_02,
        marg_ot_01,
        marg_cl_0_,
        mow_gtb,
        m_st,
        kf_cih,
        msl_ao,
        mow_conc,
        msdw_rc,
        marg_cl_02,
        aos_hhw_tc,
        marg_cl_01,
        main_ot_f,
        msl_se,
        mof_mud,
        hhs_6_8,
        aos_smm,
        mof_wb,
        main_ot_m,
        mor_gr_th_,
        marg_ot_0_,
        main_ot_p,
        total,
        msdw_os,
        tfufc_nc,
        mor_ss,
        marg_al_f,
        hh_cond_11,
        mc_1,
        m_lit,
        hh_tscs_ns,
        mc_2,
        marg_al_m,
        mc_3,
        msdw_tfuts,
        hh_cond_10,
        mc_4,
        ldws_wp,
        marg_al_p,
        mof_stone,
        pl_wsvi,
        mdds_st,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'bbox': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if bbox_crs is not None:
            
            _query_params.append(('bbox-crs', bbox_crs))
            
        if crs is not None:
            
            _query_params.append(('crs', crs))
            
        if bbox is not None:
            
            _query_params.append(('bbox', bbox))
            
        if datetime is not None:
            
            _query_params.append(('datetime', datetime))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if tot_m is not None:
            
            _query_params.append(('TOT_M', tot_m))
            
        if tot_f is not None:
            
            _query_params.append(('TOT_F', tot_f))
            
        if fpfl_os is not None:
            
            _query_params.append(('FPFL_OS', fpfl_os))
            
        if ndr_ner1 is not None:
            
            _query_params.append(('NDR_NER1', ndr_ner1))
            
        if ndr_ner2 is not None:
            
            _query_params.append(('NDR_NER2', ndr_ner2))
            
        if mor_bb is not None:
            
            _query_params.append(('MOR_BB', mor_bb))
            
        if non_work_p is not None:
            
            _query_params.append(('NON_WORK_P', non_work_p))
            
        if marg_ot_32 is not None:
            
            _query_params.append(('MARG_OT_32', marg_ot_32))
            
        if marg_ot_31 is not None:
            
            _query_params.append(('MARG_OT_31', marg_ot_31))
            
        if wwoc_nd is not None:
            
            _query_params.append(('WWOC_ND', wwoc_nd))
            
        if non_work_m is not None:
            
            _query_params.append(('NON_WORK_M', non_work_m))
            
        if tot_p is not None:
            
            _query_params.append(('TOT_P', tot_p))
            
        if mof_aom is not None:
            
            _query_params.append(('MOF_AOM', mof_aom))
            
        if non_work_f is not None:
            
            _query_params.append(('NON_WORK_F', non_work_f))
            
        if mof_mft is not None:
            
            _query_params.append(('MOF_MFT', mof_mft))
            
        if f_ill is not None:
            
            _query_params.append(('F_ILL', f_ill))
            
        if mdds_vt is not None:
            
            _query_params.append(('MDDS_VT', mdds_vt))
            
        if tfufc_elc is not None:
            
            _query_params.append(('TFUFC_ELC', tfufc_elc))
            
        if main_cl_p is not None:
            
            _query_params.append(('MAIN_CL_P', main_cl_p))
            
        if mor_conc is not None:
            
            _query_params.append(('MOR_CONC', mor_conc))
            
        if sl_nsrbh is not None:
            
            _query_params.append(('SL_NSRBH', sl_nsrbh))
            
        if hh_tscs_uc is not None:
            
            _query_params.append(('HH_TSCS_UC', hh_tscs_uc))
            
        if mow_gimas is not None:
            
            _query_params.append(('MOW_GIMAS', mow_gimas))
            
        if kf_hk is not None:
            
            _query_params.append(('KF_HK', kf_hk))
            
        if mdds_dt is not None:
            
            _query_params.append(('MDDS_DT', mdds_dt))
            
        if mow_wood is not None:
            
            _query_params.append(('MOW_WOOD', mow_wood))
            
        if hh_tscs_tt is not None:
            
            _query_params.append(('HH_TSCS_TT', hh_tscs_tt))
            
        if os_ren is not None:
            
            _query_params.append(('OS_REN', os_ren))
            
        if mow_bb is not None:
            
            _query_params.append(('MOW_BB', mow_bb))
            
        if msl_el is not None:
            
            _query_params.append(('MSL_EL', msl_el))
            
        if tfufc_kr is not None:
            
            _query_params.append(('TFUFC_KR', tfufc_kr))
            
        if mor_pl_pol is not None:
            
            _query_params.append(('MOR_PL_POL', mor_pl_pol))
            
        if marg_ot_3_ is not None:
            
            _query_params.append(('MARG_OT_3_', marg_ot_3_))
            
        if hh_cond__3 is not None:
            
            _query_params.append(('HH_COND__3', hh_cond__3))
            
        if hh_cond__4 is not None:
            
            _query_params.append(('HH_COND__4', hh_cond__4))
            
        if hh_cond__1 is not None:
            
            _query_params.append(('HH_COND__1', hh_cond__1))
            
        if hh_cond__2 is not None:
            
            _query_params.append(('HH_COND__2', hh_cond__2))
            
        if hh_cond__7 is not None:
            
            _query_params.append(('HH_COND__7', hh_cond__7))
            
        if mof_cem is not None:
            
            _query_params.append(('MOF_CEM', mof_cem))
            
        if hh_cond__8 is not None:
            
            _query_params.append(('HH_COND__8', hh_cond__8))
            
        if hh_cond__5 is not None:
            
            _query_params.append(('HH_COND__5', hh_cond__5))
            
        if hh_cond__6 is not None:
            
            _query_params.append(('HH_COND__6', hh_cond__6))
            
        if ans_pl is not None:
            
            _query_params.append(('ANS_PL', ans_pl))
            
        if hh_cond__9 is not None:
            
            _query_params.append(('HH_COND__9', hh_cond__9))
            
        if marg_cl_3_ is not None:
            
            _query_params.append(('MARG_CL_3_', marg_cl_3_))
            
        if mc_5_ is not None:
            
            _query_params.append(('MC_5_', mc_5_))
            
        if mainwork_m is not None:
            
            _query_params.append(('MAINWORK_M', mainwork_m))
            
        if hhs_4 is not None:
            
            _query_params.append(('HHS_4', hhs_4))
            
        if hhs_5 is not None:
            
            _query_params.append(('HHS_5', hhs_5))
            
        if fpfl_pss is not None:
            
            _query_params.append(('FPFL_PSS', fpfl_pss))
            
        if mainwork_p is not None:
            
            _query_params.append(('MAINWORK_P', mainwork_p))
            
        if mow_mub is not None:
            
            _query_params.append(('MOW_MUB', mow_mub))
            
        if hh_tscs_sp is not None:
            
            _query_params.append(('HH_TSCS_SP', hh_tscs_sp))
            
        if kf_tot is not None:
            
            _query_params.append(('KF_TOT', kf_tot))
            
        if mainwork_f is not None:
            
            _query_params.append(('MAINWORK_F', mainwork_f))
            
        if mor_mmt is not None:
            
            _query_params.append(('MOR_MMT', mor_mmt))
            
        if hhs_1 is not None:
            
            _query_params.append(('HHS_1', hhs_1))
            
        if hhs_2 is not None:
            
            _query_params.append(('HHS_2', hhs_2))
            
        if os_non is not None:
            
            _query_params.append(('OS_NON', os_non))
            
        if hhs_3 is not None:
            
            _query_params.append(('HHS_3', hhs_3))
            
        if main_cl_m is not None:
            
            _query_params.append(('MAIN_CL_M', main_cl_m))
            
        if no_hh is not None:
            
            _query_params.append(('No_HH', no_hh))
            
        if mdds_sdt is not None:
            
            _query_params.append(('MDDS_SDT', mdds_sdt))
            
        if main_cl_f is not None:
            
            _query_params.append(('MAIN_CL_F', main_cl_f))
            
        if wwoc_od is not None:
            
            _query_params.append(('WWOC_OD', wwoc_od))
            
        if sl_nssba is not None:
            
            _query_params.append(('SL_NSSBA', sl_nssba))
            
        if p_06 is not None:
            
            _query_params.append(('P_06', p_06))
            
        if nhhnhl is not None:
            
            _query_params.append(('NHHNHL', nhhnhl))
            
        if kf_coh is not None:
            
            _query_params.append(('KF_COH', kf_coh))
            
        if ldws_a is not None:
            
            _query_params.append(('LDWS_A', ldws_a))
            
        if tnhh_abs is not None:
            
            _query_params.append(('TNHH_ABS', tnhh_abs))
            
        if fpfl_st is not None:
            
            _query_params.append(('FPFL_ST', fpfl_st))
            
        if msdw_hp is not None:
            
            _query_params.append(('MSDW_HP', msdw_hp))
            
        if marg_al_0_ is not None:
            
            _query_params.append(('MARG_AL_0_', marg_al_0_))
            
        if aos_tm_bot is not None:
            
            _query_params.append(('AOS_TM_BOT', aos_tm_bot))
            
        if mor_gi_mas is not None:
            
            _query_params.append(('MOR_GI_MAS', mor_gi_mas))
            
        if mow_aom is not None:
            
            _query_params.append(('MOW_AOM', mow_aom))
            
        if marg_hh_3_ is not None:
            
            _query_params.append(('MARG_HH_3_', marg_hh_3_))
            
        if msdw_tpl is not None:
            
            _query_params.append(('MSDW_TPL', msdw_tpl))
            
        if p_st is not None:
            
            _query_params.append(('P_ST', p_st))
            
        if p_lit is not None:
            
            _query_params.append(('P_LIT', p_lit))
            
        if mor_hmt is not None:
            
            _query_params.append(('MOR_HMT', mor_hmt))
            
        if ndr_4_r is not None:
            
            _query_params.append(('NDR_4R', ndr_4_r))
            
        if aos_tel is not None:
            
            _query_params.append(('AOS_TEL', aos_tel))
            
        if marg_hh_31 is not None:
            
            _query_params.append(('MARG_HH_31', marg_hh_31))
            
        if os_ow is not None:
            
            _query_params.append(('OS_OW', os_ow))
            
        if mof_bb is not None:
            
            _query_params.append(('MOF_BB', mof_bb))
            
        if marg_cl_f is not None:
            
            _query_params.append(('MARG_CL_F', marg_cl_f))
            
        if kf_hk1 is not None:
            
            _query_params.append(('KF_HK1', kf_hk1))
            
        if mor_aom is not None:
            
            _query_params.append(('MOR_AOM', mor_aom))
            
        if marg_cl_m is not None:
            
            _query_params.append(('MARG_CL_M', marg_cl_m))
            
        if marg_hh_32 is not None:
            
            _query_params.append(('MARG_HH_32', marg_hh_32))
            
        if marg_cl_p is not None:
            
            _query_params.append(('MARG_CL_P', marg_cl_p))
            
        if marg_al_31 is not None:
            
            _query_params.append(('MARG_AL_31', marg_al_31))
            
        if p_sc is not None:
            
            _query_params.append(('P_SC', p_sc))
            
        if marg_al_32 is not None:
            
            _query_params.append(('MARG_AL_32', marg_al_32))
            
        if ndr_3_r is not None:
            
            _query_params.append(('NDR_3R', ndr_3_r))
            
        if f_06 is not None:
            
            _query_params.append(('F_06', f_06))
            
        if ndr_tr is not None:
            
            _query_params.append(('NDR_TR', ndr_tr))
            
        if margwork_f is not None:
            
            _query_params.append(('MARGWORK_F', margwork_f))
            
        if ndr_ner is not None:
            
            _query_params.append(('NDR_NER', ndr_ner))
            
        if f_sc is not None:
            
            _query_params.append(('F_SC', f_sc))
            
        if nhh_hbfw_1 is not None:
            
            _query_params.append(('NHH_HBFW_1', nhh_hbfw_1))
            
        if nhh_hbfw_2 is not None:
            
            _query_params.append(('NHH_HBFW_2', nhh_hbfw_2))
            
        if margwork_p is not None:
            
            _query_params.append(('MARGWORK_P', margwork_p))
            
        if margwork_m is not None:
            
            _query_params.append(('MARGWORK_M', margwork_m))
            
        if marg_al_01 is not None:
            
            _query_params.append(('MARG_AL_01', marg_al_01))
            
        if ldws_np is not None:
            
            _query_params.append(('LDWS_NP', ldws_np))
            
        if f_st is not None:
            
            _query_params.append(('F_ST', f_st))
            
        if main_al_p is not None:
            
            _query_params.append(('MAIN_AL_P', main_al_p))
            
        if wwoc_cd is not None:
            
            _query_params.append(('WWOC_CD', wwoc_cd))
            
        if marg_al_02 is not None:
            
            _query_params.append(('MARG_AL_02', marg_al_02))
            
        if margwork_4 is not None:
            
            _query_params.append(('MARGWORK_4', margwork_4))
            
        if os_ao is not None:
            
            _query_params.append(('OS_AO', os_ao))
            
        if margwork_3 is not None:
            
            _query_params.append(('MARGWORK_3', margwork_3))
            
        if margwork_2 is not None:
            
            _query_params.append(('MARGWORK_2', margwork_2))
            
        if margwork_1 is not None:
            
            _query_params.append(('MARGWORK_1', margwork_1))
            
        if margwork_0 is not None:
            
            _query_params.append(('MARGWORK_0', margwork_0))
            
        if st_name is not None:
            
            _query_params.append(('ST_NAME', st_name))
            
        if nhh_hlf is not None:
            
            _query_params.append(('NHH_HLF', nhh_hlf))
            
        if margwork_5 is not None:
            
            _query_params.append(('MARGWORK_5', margwork_5))
            
        if f_lit is not None:
            
            _query_params.append(('F_LIT', f_lit))
            
        if sdt_name is not None:
            
            _query_params.append(('SDT_NAME', sdt_name))
            
        if msl_kr is not None:
            
            _query_params.append(('MSL_KR', msl_kr))
            
        if mow_pl_pol is not None:
            
            _query_params.append(('MOW_PL_POL', mow_pl_pol))
            
        if m_ill is not None:
            
            _query_params.append(('M_ILL', m_ill))
            
        if tfufc_lpg_ is not None:
            
            _query_params.append(('TFUFC_LPG_', tfufc_lpg_))
            
        if tfufc_cc is not None:
            
            _query_params.append(('TFUFC_CC', tfufc_cc))
            
        if mow_snpwm is not None:
            
            _query_params.append(('MOW_SNPWM', mow_snpwm))
            
        if aos_ is not None:
            
            _query_params.append(('AOS_', aos_))
            
        if dt_name is not None:
            
            _query_params.append(('DT_NAME', dt_name))
            
        if kf_dnhk1 is not None:
            
            _query_params.append(('KF_DNHK1', kf_dnhk1))
            
        if marg_hh_02 is not None:
            
            _query_params.append(('MARG_HH_02', marg_hh_02))
            
        if marg_hh_01 is not None:
            
            _query_params.append(('MARG_HH_01', marg_hh_01))
            
        if tot_work_p is not None:
            
            _query_params.append(('TOT_WORK_P', tot_work_p))
            
        if tot_work_m is not None:
            
            _query_params.append(('TOT_WORK_M', tot_work_m))
            
        if m_06 is not None:
            
            _query_params.append(('M_06', m_06))
            
        if marg_ot_m is not None:
            
            _query_params.append(('MARG_OT_M', marg_ot_m))
            
        if tot_work_f is not None:
            
            _query_params.append(('TOT_WORK_F', tot_work_f))
            
        if main_al_m is not None:
            
            _query_params.append(('MAIN_AL_M', main_al_m))
            
        if marg_ot_p is not None:
            
            _query_params.append(('MARG_OT_P', marg_ot_p))
            
        if main_al_f is not None:
            
            _query_params.append(('MAIN_AL_F', main_al_f))
            
        if pl_wsop is not None:
            
            _query_params.append(('PL_WSOP', pl_wsop))
            
        if marg_ot_f is not None:
            
            _query_params.append(('MARG_OT_F', marg_ot_f))
            
        if aos_tm_mo is not None:
            
            _query_params.append(('AOS_TM_MO', aos_tm_mo))
            
        if msl_nl is not None:
            
            _query_params.append(('MSL_NL', msl_nl))
            
        if msl_ool is not None:
            
            _query_params.append(('MSL_OOL', msl_ool))
            
        if kf_dnhk is not None:
            
            _query_params.append(('KF_DNHK', kf_dnhk))
            
        if tfufc_cr is not None:
            
            _query_params.append(('TFUFC_CR', tfufc_cr))
            
        if main_hh_p is not None:
            
            _query_params.append(('MAIN_HH_P', main_hh_p))
            
        if hhs_9_ is not None:
            
            _query_params.append(('HHS_9_', hhs_9_))
            
        if main_hh_m is not None:
            
            _query_params.append(('MAIN_HH_M', main_hh_m))
            
        if aos_tm_lo is not None:
            
            _query_params.append(('AOS_TM_LO', aos_tm_lo))
            
        if main_hh_f is not None:
            
            _query_params.append(('MAIN_HH_F', main_hh_f))
            
        if hh_tscs_p is not None:
            
            _query_params.append(('HH_TSCS_P', hh_tscs_p))
            
        if ndr_or is not None:
            
            _query_params.append(('NDR_OR', ndr_or))
            
        if kf_nc is not None:
            
            _query_params.append(('KF_NC', kf_nc))
            
        if msdw_ucw is not None:
            
            _query_params.append(('MSDW_UCW', msdw_ucw))
            
        if aos_noasic is not None:
            
            _query_params.append(('AOS_NOASIC', aos_noasic))
            
        if vt_name is not None:
            
            _query_params.append(('VT_NAME', vt_name))
            
        if mow_spwm is not None:
            
            _query_params.append(('MOW_SPWM', mow_spwm))
            
        if aos_cl_win is not None:
            
            _query_params.append(('AOS_CL_WIN', aos_cl_win))
            
        if tfufc_ is not None:
            
            _query_params.append(('TFUFC_', tfufc_))
            
        if msdw_sp is not None:
            
            _query_params.append(('MSDW_SP', msdw_sp))
            
        if marg_al_3_ is not None:
            
            _query_params.append(('MARG_AL_3_', marg_al_3_))
            
        if hh_tscs_s is not None:
            
            _query_params.append(('HH_TSCS_S', hh_tscs_s))
            
        if tfufc_ao is not None:
            
            _query_params.append(('TFUFC_AO', tfufc_ao))
            
        if msdw_cw is not None:
            
            _query_params.append(('MSDW_CW', msdw_cw))
            
        if aos_cjv is not None:
            
            _query_params.append(('AOS_CJV', aos_cjv))
            
        if marg_hh_f is not None:
            
            _query_params.append(('MARG_HH_F', marg_hh_f))
            
        if msdw_tb is not None:
            
            _query_params.append(('MSDW_TB', msdw_tb))
            
        if marg_hh_0_ is not None:
            
            _query_params.append(('MARG_HH_0_', marg_hh_0_))
            
        if marg_hh_m is not None:
            
            _query_params.append(('MARG_HH_M', marg_hh_m))
            
        if marg_hh_p is not None:
            
            _query_params.append(('MARG_HH_P', marg_hh_p))
            
        if p_ill is not None:
            
            _query_params.append(('P_ILL', p_ill))
            
        if aos_bi is not None:
            
            _query_params.append(('AOS_BI', aos_bi))
            
        if tfufc_bio is not None:
            
            _query_params.append(('TFUFC_BIO', tfufc_bio))
            
        if hh_cond_ch is not None:
            
            _query_params.append(('HH_COND_CH', hh_cond_ch))
            
        if nsdiod is not None:
            
            _query_params.append(('NSDIOD', nsdiod))
            
        if tfufc_clc is not None:
            
            _query_params.append(('TFUFC_CLC', tfufc_clc))
            
        if nhh_hbfwtp is not None:
            
            _query_params.append(('NHH_HBFWTP', nhh_hbfwtp))
            
        if marg_cl_31 is not None:
            
            _query_params.append(('MARG_CL_31', marg_cl_31))
            
        if marg_cl_32 is not None:
            
            _query_params.append(('MARG_CL_32', marg_cl_32))
            
        if aos_cl_wii is not None:
            
            _query_params.append(('AOS_CL_WII', aos_cl_wii))
            
        if msdw_tfts is not None:
            
            _query_params.append(('MSDW_TFTS', msdw_tfts))
            
        if m_sc is not None:
            
            _query_params.append(('M_SC', m_sc))
            
        if ans_op is not None:
            
            _query_params.append(('ANS_OP', ans_op))
            
        if marg_ot_02 is not None:
            
            _query_params.append(('MARG_OT_02', marg_ot_02))
            
        if marg_ot_01 is not None:
            
            _query_params.append(('MARG_OT_01', marg_ot_01))
            
        if marg_cl_0_ is not None:
            
            _query_params.append(('MARG_CL_0_', marg_cl_0_))
            
        if mow_gtb is not None:
            
            _query_params.append(('MOW_GTB', mow_gtb))
            
        if m_st is not None:
            
            _query_params.append(('M_ST', m_st))
            
        if kf_cih is not None:
            
            _query_params.append(('KF_CIH', kf_cih))
            
        if msl_ao is not None:
            
            _query_params.append(('MSL_AO', msl_ao))
            
        if mow_conc is not None:
            
            _query_params.append(('MOW_CONC', mow_conc))
            
        if msdw_rc is not None:
            
            _query_params.append(('MSDW_RC', msdw_rc))
            
        if marg_cl_02 is not None:
            
            _query_params.append(('MARG_CL_02', marg_cl_02))
            
        if aos_hhw_tc is not None:
            
            _query_params.append(('AOS_HHW_TC', aos_hhw_tc))
            
        if marg_cl_01 is not None:
            
            _query_params.append(('MARG_CL_01', marg_cl_01))
            
        if main_ot_f is not None:
            
            _query_params.append(('MAIN_OT_F', main_ot_f))
            
        if msl_se is not None:
            
            _query_params.append(('MSL_SE', msl_se))
            
        if mof_mud is not None:
            
            _query_params.append(('MOF_MUD', mof_mud))
            
        if hhs_6_8 is not None:
            
            _query_params.append(('HHS_6_8', hhs_6_8))
            
        if aos_smm is not None:
            
            _query_params.append(('AOS_SMM', aos_smm))
            
        if mof_wb is not None:
            
            _query_params.append(('MOF_WB', mof_wb))
            
        if main_ot_m is not None:
            
            _query_params.append(('MAIN_OT_M', main_ot_m))
            
        if mor_gr_th_ is not None:
            
            _query_params.append(('MOR_GR_TH_', mor_gr_th_))
            
        if marg_ot_0_ is not None:
            
            _query_params.append(('MARG_OT_0_', marg_ot_0_))
            
        if main_ot_p is not None:
            
            _query_params.append(('MAIN_OT_P', main_ot_p))
            
        if total is not None:
            
            _query_params.append(('TOTAL', total))
            
        if msdw_os is not None:
            
            _query_params.append(('MSDW_OS', msdw_os))
            
        if tfufc_nc is not None:
            
            _query_params.append(('TFUFC_NC', tfufc_nc))
            
        if mor_ss is not None:
            
            _query_params.append(('MOR_SS', mor_ss))
            
        if marg_al_f is not None:
            
            _query_params.append(('MARG_AL_F', marg_al_f))
            
        if hh_cond_11 is not None:
            
            _query_params.append(('HH_COND_11', hh_cond_11))
            
        if mc_1 is not None:
            
            _query_params.append(('MC_1', mc_1))
            
        if m_lit is not None:
            
            _query_params.append(('M_LIT', m_lit))
            
        if hh_tscs_ns is not None:
            
            _query_params.append(('HH_TSCS_NS', hh_tscs_ns))
            
        if mc_2 is not None:
            
            _query_params.append(('MC_2', mc_2))
            
        if marg_al_m is not None:
            
            _query_params.append(('MARG_AL_M', marg_al_m))
            
        if mc_3 is not None:
            
            _query_params.append(('MC_3', mc_3))
            
        if msdw_tfuts is not None:
            
            _query_params.append(('MSDW_TFUTS', msdw_tfuts))
            
        if hh_cond_10 is not None:
            
            _query_params.append(('HH_COND_10', hh_cond_10))
            
        if mc_4 is not None:
            
            _query_params.append(('MC_4', mc_4))
            
        if ldws_wp is not None:
            
            _query_params.append(('LDWS_WP', ldws_wp))
            
        if marg_al_p is not None:
            
            _query_params.append(('MARG_AL_P', marg_al_p))
            
        if mof_stone is not None:
            
            _query_params.append(('MOF_STONE', mof_stone))
            
        if pl_wsvi is not None:
            
            _query_params.append(('PL_WSVI', pl_wsvi))
            
        if mdds_st is not None:
            
            _query_params.append(('MDDS_ST', mdds_st))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/geo+json', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'DX-AAA-Token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/collections/41f1f47c-db20-4707-bc7c-c3a46a18172f/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_specific_collection(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Collection:
        """Metadata about Primary Census Abstract (2011) for Kamrup Metropolitan district in Assam at village level


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_specific_collection_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Collection",
            '500': "Exception500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_specific_collection_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Collection]:
        """Metadata about Primary Census Abstract (2011) for Kamrup Metropolitan district in Assam at village level


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_specific_collection_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Collection",
            '500': "Exception500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_specific_collection_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Metadata about Primary Census Abstract (2011) for Kamrup Metropolitan district in Assam at village level


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_specific_collection_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Collection",
            '500': "Exception500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_specific_collection_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/collections/41f1f47c-db20-4707-bc7c-c3a46a18172f',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_specific_feature(
        self,
        feature_id: StrictInt,
        crs: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FeatureGeoJSON:
        """Get single feature from Primary Census Abstract (2011) for Kamrup Metropolitan district in Assam at village level


        :param feature_id: (required)
        :type feature_id: int
        :param crs:
        :type crs: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_specific_feature_serialize(
            feature_id=feature_id,
            crs=crs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FeatureGeoJSON",
            '404': None,
            '500': "Exception500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_specific_feature_with_http_info(
        self,
        feature_id: StrictInt,
        crs: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FeatureGeoJSON]:
        """Get single feature from Primary Census Abstract (2011) for Kamrup Metropolitan district in Assam at village level


        :param feature_id: (required)
        :type feature_id: int
        :param crs:
        :type crs: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_specific_feature_serialize(
            feature_id=feature_id,
            crs=crs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FeatureGeoJSON",
            '404': None,
            '500': "Exception500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_specific_feature_without_preload_content(
        self,
        feature_id: StrictInt,
        crs: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get single feature from Primary Census Abstract (2011) for Kamrup Metropolitan district in Assam at village level


        :param feature_id: (required)
        :type feature_id: int
        :param crs:
        :type crs: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_specific_feature_serialize(
            feature_id=feature_id,
            crs=crs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FeatureGeoJSON",
            '404': None,
            '500': "Exception500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_specific_feature_serialize(
        self,
        feature_id,
        crs,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if feature_id is not None:
            _path_params['featureId'] = feature_id
        # process the query parameters
        if crs is not None:
            
            _query_params.append(('crs', crs))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/geo+json', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'DX-AAA-Token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/collections/41f1f47c-db20-4707-bc7c-c3a46a18172f/items/{featureId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


