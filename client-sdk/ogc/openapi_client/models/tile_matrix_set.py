# coding: utf-8

"""
    OGC Compliant DX Resource Server

    OGC compliant Features and Common API definitions. Includes Schema and Response Objects.   <a href='/stac/api'>STAC API Documentation</a>    <a href='/metering/api'>DX Metering API Documentation</a>

    The version of the OpenAPI document: 1.0.1
    Contact: info@iudx.org.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.tile_matrix_set_item_crs import TileMatrixSetItemCrs
from openapi_client.models.tile_matrix_set_tile_matrices_inner import TileMatrixSetTileMatricesInner
from typing import Optional, Set
from typing_extensions import Self

class TileMatrixSet(BaseModel):
    """
    A definition of a tile matrix set following the Tile Matrix Set standard. For tileset metadata, such a description (in `tileMatrixSet` property) is only required for offline use, as an alternative to a link with a `http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme` relation type.
    """ # noqa: E501
    title: Optional[StrictStr] = Field(default=None, description="Title of this tile matrix set, normally used for display to a human")
    description: Optional[StrictStr] = Field(default=None, description="Brief narrative description of this tile matrix set, normally available for display to a human")
    keywords: Optional[List[StrictStr]] = Field(default=None, description="Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this tile matrix set")
    id: Optional[StrictStr] = Field(default=None, description="Tile matrix set identifier. Implementation of 'identifier'")
    uri: Optional[StrictStr] = Field(default=None, description="Reference to an official source for this tileMatrixSet")
    ordered_axes: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, alias="orderedAxes")
    crs: TileMatrixSetItemCrs
    well_known_scale_set: Optional[StrictStr] = Field(default=None, description="Reference to a well-known scale set", alias="wellKnownScaleSet")
    tile_matrices: List[TileMatrixSetTileMatricesInner] = Field(description="Describes scale levels and its tile matrices", alias="tileMatrices")
    __properties: ClassVar[List[str]] = ["title", "description", "keywords", "id", "uri", "orderedAxes", "crs", "wellKnownScaleSet", "tileMatrices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TileMatrixSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of crs
        if self.crs:
            _dict['crs'] = self.crs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tile_matrices (list)
        _items = []
        if self.tile_matrices:
            for _item in self.tile_matrices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tileMatrices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TileMatrixSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "keywords": obj.get("keywords"),
            "id": obj.get("id"),
            "uri": obj.get("uri"),
            "orderedAxes": obj.get("orderedAxes"),
            "crs": TileMatrixSetItemCrs.from_dict(obj["crs"]) if obj.get("crs") is not None else None,
            "wellKnownScaleSet": obj.get("wellKnownScaleSet"),
            "tileMatrices": [TileMatrixSetTileMatricesInner.from_dict(_item) for _item in obj["tileMatrices"]] if obj.get("tileMatrices") is not None else None
        })
        return _obj


