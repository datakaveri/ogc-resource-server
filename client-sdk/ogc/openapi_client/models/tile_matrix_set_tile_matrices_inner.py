# coding: utf-8

"""
    OGC Compliant DX Resource Server

    OGC compliant Features and Common API definitions. Includes Schema and Response Objects.   <a href='/stac/api'>STAC API Documentation</a>    <a href='/metering/api'>DX Metering API Documentation</a>

    The version of the OpenAPI document: 1.0.1
    Contact: info@iudx.org.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.tile_matrix_set_tile_matrices_inner_variable_matrix_widths_inner import TileMatrixSetTileMatricesInnerVariableMatrixWidthsInner
from typing import Optional, Set
from typing_extensions import Self

class TileMatrixSetTileMatricesInner(BaseModel):
    """
    A tile matrix, usually corresponding to a particular zoom level of a TileMatrixSet.
    """ # noqa: E501
    title: Optional[StrictStr] = Field(default=None, description="Title of this tile matrix, normally used for display to a human")
    description: Optional[StrictStr] = Field(default=None, description="Brief narrative description of this tile matrix set, normally available for display to a human")
    keywords: Optional[List[StrictStr]] = Field(default=None, description="Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this dataset")
    id: StrictStr = Field(description="Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. Implementation of 'identifier'")
    scale_denominator: Union[StrictFloat, StrictInt] = Field(description="Scale denominator of this tile matrix", alias="scaleDenominator")
    cell_size: Union[StrictFloat, StrictInt] = Field(description="Cell size of this tile matrix", alias="cellSize")
    corner_of_origin: Optional[StrictStr] = Field(default='topLeft', description="The corner of the tile matrix (_topLeft_ or _bottomLeft_) used as the origin for numbering tile rows and columns. This corner is also a corner of the (0, 0) tile.", alias="cornerOfOrigin")
    point_of_origin: Any = Field(alias="pointOfOrigin")
    tile_width: Union[Annotated[float, Field(multiple_of=1, strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]] = Field(description="Width of each tile of this tile matrix in pixels", alias="tileWidth")
    tile_height: Union[Annotated[float, Field(multiple_of=1, strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]] = Field(description="Height of each tile of this tile matrix in pixels", alias="tileHeight")
    matrix_height: Union[Annotated[float, Field(multiple_of=1, strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]] = Field(description="Width of the matrix (number of tiles in width)", alias="matrixHeight")
    matrix_width: Union[Annotated[float, Field(multiple_of=1, strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]] = Field(description="Height of the matrix (number of tiles in height)", alias="matrixWidth")
    variable_matrix_widths: Optional[List[TileMatrixSetTileMatricesInnerVariableMatrixWidthsInner]] = Field(default=None, description="Describes the rows that has variable matrix width", alias="variableMatrixWidths")
    __properties: ClassVar[List[str]] = ["title", "description", "keywords", "id", "scaleDenominator", "cellSize", "cornerOfOrigin", "pointOfOrigin", "tileWidth", "tileHeight", "matrixHeight", "matrixWidth", "variableMatrixWidths"]

    @field_validator('corner_of_origin')
    def corner_of_origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['topLeft', 'bottomLeft']):
            raise ValueError("must be one of enum values ('topLeft', 'bottomLeft')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TileMatrixSetTileMatricesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in variable_matrix_widths (list)
        _items = []
        if self.variable_matrix_widths:
            for _item in self.variable_matrix_widths:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variableMatrixWidths'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TileMatrixSetTileMatricesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "keywords": obj.get("keywords"),
            "id": obj.get("id"),
            "scaleDenominator": obj.get("scaleDenominator"),
            "cellSize": obj.get("cellSize"),
            "cornerOfOrigin": obj.get("cornerOfOrigin") if obj.get("cornerOfOrigin") is not None else 'topLeft',
            "pointOfOrigin": obj.get("pointOfOrigin"),
            "tileWidth": obj.get("tileWidth"),
            "tileHeight": obj.get("tileHeight"),
            "matrixHeight": obj.get("matrixHeight"),
            "matrixWidth": obj.get("matrixWidth"),
            "variableMatrixWidths": [TileMatrixSetTileMatricesInnerVariableMatrixWidthsInner.from_dict(_item) for _item in obj["variableMatrixWidths"]] if obj.get("variableMatrixWidths") is not None else None
        })
        return _obj


