# coding: utf-8

"""
    OGC Compliant DX Resource Server

    OGC compliant Features and Common API definitions. Includes Schema and Response Objects.   <a href='/stac/api'>STAC API Documentation</a>    <a href='/metering/api'>DX Metering API Documentation</a>

    The version of the OpenAPI document: 1.0.1
    Contact: info@iudx.org.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.description_type_additional_parameters import DescriptionTypeAdditionalParameters
from openapi_client.models.input_description_all_of_max_occurs import InputDescriptionAllOfMaxOccurs
from openapi_client.models.metadata import Metadata
from openapi_client.models.model_schema import ModelSchema
from typing import Optional, Set
from typing_extensions import Self

class InputDescription(BaseModel):
    """
    InputDescription
    """ # noqa: E501
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    keywords: Optional[List[StrictStr]] = None
    metadata: Optional[List[Metadata]] = None
    additional_parameters: Optional[DescriptionTypeAdditionalParameters] = Field(default=None, alias="additionalParameters")
    min_occurs: Optional[StrictInt] = Field(default=1, alias="minOccurs")
    max_occurs: Optional[InputDescriptionAllOfMaxOccurs] = Field(default=None, alias="maxOccurs")
    var_schema: ModelSchema = Field(alias="schema")
    __properties: ClassVar[List[str]] = ["title", "description", "keywords", "metadata", "additionalParameters", "minOccurs", "maxOccurs", "schema"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InputDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of additional_parameters
        if self.additional_parameters:
            _dict['additionalParameters'] = self.additional_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_occurs
        if self.max_occurs:
            _dict['maxOccurs'] = self.max_occurs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InputDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "keywords": obj.get("keywords"),
            "metadata": [Metadata.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "additionalParameters": DescriptionTypeAdditionalParameters.from_dict(obj["additionalParameters"]) if obj.get("additionalParameters") is not None else None,
            "minOccurs": obj.get("minOccurs") if obj.get("minOccurs") is not None else 1,
            "maxOccurs": InputDescriptionAllOfMaxOccurs.from_dict(obj["maxOccurs"]) if obj.get("maxOccurs") is not None else None,
            "schema": ModelSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None
        })
        return _obj


